local Base64 = require("ge_tts.Base64")

local Chain = require("sebaestschjin-tts.Chain")
local Constant = require("sebaestschjin-tts.Constant")
local Logger = require("sebaestschjin-tts.Logger")
local Object = require("sebaestschjin-tts.Object")
local Search = require("sebaestschjin-tts.Search")
local StringUtil = require("sebaestschjin-tts.StringUtil")
local TableUtil = require("sebaestschjin-tts.TableUtil")

local Component = require("gloomhaven-campaign-manager.Component")
local Game = require("gloomhaven-campaign-manager.Game")
local Quest = require("gloomhaven-campaign-manager.Quest")
local Shop = require("gloomhaven-campaign-manager.Shop")

local Character = {}

local AbilityDefaultDistance = 5
local AbilityMaxDistance = AbilityDefaultDistance + 2

---@param index number
---@param character gh_Save_Character
function Character.load(index, character)
    Logger.info("Loading Character %s at %d", character.class, index)

    Component.loadPlayer(index, function() Character.unpackCharacterBox(index, character) end)
end

---@param player number
---@param character gh_Save_Character
function Character.unpackCharacterBox(player, character)
    Component.placeCharacterBox(player, character.class, function() Character.doLoad(player, character) end)
end

---@param player number
---@param character gh_Save_Character
function Character.doLoad(player, character)
    -- still need more waiting to init the UI of the sheet :-(
    Wait.time(function() Character.loadCharacterSheet(player, character) end, 1)
    Wait.time(function() Character.loadMaxHp(player, character) end, 5)
    Character.loadAbilities(player, character)
    Character.loadQuest(player, character)
end

---@param player number
---@param character gh_Save_Character
function Character.loadCharacterSheet(player, character)
    local characterSheet = Component.characterSheet(player)

    if character.name then
        characterSheet.UI.setAttribute("Name", "text", character.name)
    end
    if character.gold then
        characterSheet.call("addEx", { name = "gold", amount = character.gold })
    end
    if character.xp then
        characterSheet.call("addEx", { name = "xp", amount = character.xp })
    end
    if character.checkmarks then
        for i = 1, character.checkmarks do
            characterSheet.call("clickedToggle", "notes" .. tostring(i))
        end
    end
    if character.perks then
        Character.loadPerks(player, character)
    end
    if character.items then
        Character.loadItems(player, character)
    end
    if character.notes then
        characterSheet.UI.setAttribute("NotesFront", "text", table.concat(character.notes, "\n"))
    end
    Character.loadHiddenNotes(characterSheet, character.hiddenNotes)
end

---@param characterSheet tts__Object
---@param hiddenNotes string[]
function Character.loadHiddenNotes(characterSheet, hiddenNotes)
    if not hiddenNotes then
        return
    end

    local decodedNotes = --[[---@type string[] ]]{}
    for i, note in ipairs(hiddenNotes) do
        if StringUtil.isBase64(note) then
            decodedNotes[i] = StringUtil.chars(Base64.decode(note))
        else
            decodedNotes[i] = note
        end
    end
    characterSheet.UI.setAttribute("Notes", "text", table.concat(decodedNotes, "\n"))
end

---@param player number
---@param character gh_Save_Character
function Character.loadMaxHp(player, character)
    local characterInfo = Game.class(character.class)
    local level = Character.getLevel(character.xp)
    local maxHealth = characterInfo.hp[level]
    local startingHealth = characterInfo.hp[1]

    Character.loadFigureHealth(player, character.class, maxHealth)
    if maxHealth > startingHealth then
        local tokenName = startingHealth .. " hp"
        local healthToken = --[[---@not nil]] Search.inZone(Component.playerZone(player), { name = tokenName })
        healthToken.setState(maxHealth)
    end

    if characterInfo.extraFigure then
        maxHealth = (--[[---@not nil]] characterInfo.extraFigure).hp[level]
        Character.loadFigureHealth(player, (--[[---@not nil]] characterInfo.extraFigure).name, maxHealth)
    end
end

---@param player number
---@param name string
---@param health number
function Character.loadFigureHealth(player, name, health)
    local figure = --[[---@not nil]] Search.inZone(Component.playerZone(player), { name = name, type = Object.Type.Figurine })

    figure.setTable("health", { value = health, max = health })
    figure.call("setHealth")
end

---@param player number
---@param character gh_Save_Character
function Character.loadAbilities(player, character)
    if not character.abilities then return end

    local abilityDeck = --[[---@not nil]] Component.abilityDeck(player)
    for _, abilityName in pairs(character.abilities) do
        local abilityCard, distance = Search.nearestInContainedObjects(abilityDeck, abilityName, AbilityMaxDistance)
        if abilityCard then
            if distance ~= AbilityDefaultDistance then
                Logger.warn("Tried to load the ability '%s' for class '%s', but couldn't find it in the ability deck."
                        .. " However, found a similar ability named '%s' which will be used instead."
                        .. " Please verify if this assumption is correct.",
                        abilityName, character.class, Object.name(--[[---@not nil]] abilityCard))
            end
            abilityDeck.takeObject({
                position = Component.secondHandPosition(player),
                guid = Object.guid(--[[---@not nil]] abilityCard),
            })
        else
            Logger.error("An ability named '%s' does not exist for the character class '%s'!",
                    abilityName, character.class)
        end
    end
end

---@param player number
---@param character gh_Save_Character
function Character.loadQuest(player, character)
    if not character.quest then return end

    local callback = function(card)
        card.setPosition(Component.questPosition(player))
    end
    if not Quest.take(character.quest, callback) then
        Logger.error("A quest named '%s' does not exist. Can't draw the quest from the deck.", character.quest)
    end
end

---@param player number
---@param character gh_Save_Character
function Character.loadPerks(player, character)
    local perkInfo = Game.class(character.class).perks
    local characterSheet = --[[---@not nil]] Component.characterSheet(player)
    local currentDeck = Component.attackModifiers(player)
    local additionalDeck = Component.additionalAttackModifiers(player)

    local chain = Chain()
    for _, perk in ipairs(character.perks) do
        if perkInfo[perk] then
            characterSheet.call("clickedToggle", "perk" .. tostring(perk))

            for _, card in TableUtil.ipairs(perkInfo[perk].add) do
                chain.add(function(c)
                    Character.addModifierCard(c, character, additionalDeck, currentDeck, card)
                end)
            end
            for _, card in TableUtil.ipairs(perkInfo[perk].remove) do
                chain.add(function(c)
                    Character.removeModifierCard(c, character, currentDeck, card)
                end)
            end
        else
            Logger.error("A perk '%s' does not exist for class '%s'.", perk, character.class)
        end
    end
    chain.add(function()
        currentDeck.shuffle()
        return true
    end)

    chain.proceed()
end

---@param chain seb_Chain
---@param character gh_Save_Character
---@param additionalDeck seb_WrappedDeck
---@param currentDeck tts__Deck
---@param card string
---@return boolean
function Character.addModifierCard(chain, character, additionalDeck, currentDeck, card)
    Logger.verbose("%s: Adding %s", character.class, card)

    local search = { name = Component.modifierNamePattern(card), isPattern = true }
    local foundCard, _ = Search.inContainedObjects(additionalDeck, search)
    if not foundCard then
        Logger.error("%, adding: Can't find modifier card %s.", character.class, card)
        return true
    end

    additionalDeck.takeObject({
        guid = Object.guid(--[[---@not nil]] foundCard),
        position = Component.safePosition(),
        smooth = false,
        callback_function = function(c)
            currentDeck.putObject(c)
            chain.proceed()
        end
    })

    return false
end

---@param chain seb_Chain
---@param character gh_Save_Character
---@param currentDeck tts__Deck
---@param card string
---@return boolean
function Character.removeModifierCard(chain, character, currentDeck, card)
    Logger.verbose("%s: Removing %s", character.class, card)

    local search = { name = Component.modifierNamePattern(card), isPattern = true }
    local foundCard = Search.inContainer(currentDeck, search)
    if not foundCard then
        Logger.error("%s, removing: Can't find modifier card %s.", character.class, card)
        return true
    end

    currentDeck.takeObject({
        guid = (--[[---@not nil]] foundCard).guid,
        position = Component.safePosition(),
        smooth = false,
        callback_function = function(c)
            c.destruct()
            chain.proceed()
        end })

    return false
end

---@param player number
---@param character gh_Save_Character
function Character.loadItems(player, character)
    local items = --[[---@type string[] ]] {}

    for _, item in ipairs(character.items) do
        local itemPosition = Component.itemPosition(player, item.position)

        if Shop.takeItem(item.name, itemPosition, Constant.Rotation.NORTH) then
            table.insert(items, item.name)
            Character.checkForNegativeItemEffects(character, item, itemPosition)
        else
            Logger.error("The item '%s' does not exist. Won't load item.", item.name)
        end
    end

    local characterSheet = Component.characterSheet(player)
    characterSheet.UI.setAttribute("Items", "text", table.concat(items, "\n"))
end

---@param character gh_Save_Character
---@param item gh_Save_Character_Item
---@param itemPosition tts__Vector
function Character.checkForNegativeItemEffects(character, item, itemPosition)
    if not Character.hasNegateItemEffectsPerk(character) then
        local negativeEffect = Game.Items.NegativeEffects[item.name]
        for _ = 1, negativeEffect or 0 do
            Character.dealNegativeItemEffectCard(itemPosition)
        end
    end
end

---@param character gh_Save_Character
---@return boolean
function Character.hasNegateItemEffectsPerk(character)
    local perkInfo = Game.class(character.class).perks
    for _, perk in ipairs(character.perks) do
        if perkInfo[perk].ignore == "I" then
            -- TODO use constant
            return true
        end
    end
    return false
end

---@param itemPosition tts__Vector
function Character.dealNegativeItemEffectCard(itemPosition)
    Component.minusOneDeck().takeObject({
        smooth = false,
        -- position set to ensure PLayer -1 cards placed on top of item
        position = itemPosition + Vector(0, 1, 0)
    })
end

---@param curXP number
---@return number
function Character.getLevel(curXP)
    if not curXP then curXP = 0 end
    for i, xp in pairs(Game.XpRequirements) do
        if curXP < xp then
            return i - 1
        end
    end
    return 9
end

---@param player number
---@param characters gh_Save_Character[]
function Character.save(player, characters)
    local character = --[[---@type gh_Save_Character]] {}

    local characterMat = Component.characterMat(player)
    if characterMat then
        character.class = (--[[---@not nil]] characterMat).getDescription()
        local characterSheet = Component.characterSheet(player)
        local characterSheetButtons = characterSheet.getTable("buttons")
        local characterSheetInputs = characterSheet.getTable("inputs")

        if characterSheetInputs then
            -- this is an older version of the sheet, without the inputs where you can directly set the values
            character.name = characterSheetInputs.Name
            character.xp = --[[---@not nil]] tonumber(characterSheetButtons.xp.label)
            character.gold = --[[---@not nil]] tonumber(characterSheetButtons.gold.label)
        else
            character.name = characterSheet.UI.getAttribute("Name", "text")
            character.xp = --[[---@not nil]] tonumber(characterSheet.UI.getAttribute("xp", "text"))
            character.gold = --[[---@not nil]] tonumber(characterSheet.UI.getAttribute("gold", "text"))
            character.notes = StringUtil.split(characterSheet.UI.getAttribute("NotesFront", "text"), { "\n" })
            character.hiddenNotes = Character.saveHiddenNotes(characterSheet)
        end

        local totalCheckmarks = 0
        for i = 1, 18 do
            if characterSheetButtons["notes" .. i].label ~= "" then
                totalCheckmarks = totalCheckmarks + 1
            end
        end
        character.checkmarks = totalCheckmarks

        character.perks = {}
        for i = 1, 15 do
            if characterSheetButtons["perk" .. i].label ~= "" then
                table.insert(character.perks, i)
            end
        end

        character.items = Character.saveItems(player)
        character.abilities = Character.saveAbilities(character.class, player)
        character.hand = Character.saveHand(character.class, player)
        character.quest = Character.saveQuest(player)
    end

    table.insert(characters, character)
end

---@param characterSheet tts__Object
---@return string[]
function Character.saveHiddenNotes(characterSheet)
    local notes = StringUtil.split(characterSheet.UI.getAttribute("Notes", "text"), { "\n" })
    for i, note in ipairs(notes) do
        notes[i] = Base64.encode(StringUtil.bytes(note))
    end

    return notes
end

---@param player number
---@return gh_Save_Character_Item[]
function Character.saveItems(player)
    local playerMat = Component.playerMat(player)
    local items = --[[---@type gh_Save_Character_Item[] ]] {}
    local zoneObjects = Component.playerObjects(player)
    Character.saveItemFromObjects(zoneObjects, playerMat, items)

    return TableUtil.sortByAttribute(items, "name")
end

---@param objects tts__Object[] | tts__ObjectState[]
---@param playerMat tts__Object
---@param items gh_Save_Character_Item[]
function Character.saveItemFromObjects(objects, playerMat, items)
    for _, object in ipairs(--[[---@type (tts__Object | tts__ObjectState)[] ]] objects) do
        if Component.isItemCard(object) then
            local item = { name = Object.name(object), position = Component.itemPositionName(playerMat, object) }
            table.insert(items, item)
        elseif Object.isContainer(object) then
            Character.saveItemFromObjects(Object.objects(--[[---@type tts__ContainerState]] object), playerMat, items)
        end
    end
end

---@param className string
---@param player number
---@return string[]
function Character.saveAbilities(className, player)
    local abilities = --[[---@type string[] ]] {}
    local zoneObjects = Component.playerObjects(player)
    Character.saveAbilitiesFromObjects(zoneObjects, className, abilities)

    table.sort(abilities)
    return abilities
end

---@param objects tts__Object[] | tts__ObjectState[]
---@param class string
---@param abilities string[]
function Character.saveAbilitiesFromObjects(objects, class, abilities)
    for _, object in ipairs(--[[---@type (tts__Object | tts__ObjectState)[] ]] objects) do
        if Component.isAbilityCardForClass(object, class) then
            local name = Component.getAbilityName(class, object)
            if not Component.isStartingAbility(class, name) then
                table.insert(abilities, name)
            end
        elseif Object.isContainer(object) and not Component.isAbilityDeck(object) then
            Character.saveAbilitiesFromObjects(Object.objects(--[[---@type tts__ContainerState]] object), class, abilities)
        end
    end
end

---@param className string
---@param player number
---@return string[]
function Character.saveHand(className, player)
    local handAbilities = --[[---@type string[] ]] {}
    for _, object in ipairs(Component.playerHand(player)) do
        if Component.isAbilityCardForClass(object, className) then
            local abilityName = Component.getAbilityName(className, object)
            table.insert(handAbilities, abilityName)
        end
    end

    return handAbilities
end

---@param player number
---@return number
function Character.saveQuest(player)
    local info = Character.findQuest(player)
    if info then
        return (--[[---@not nil]] info).number
    end
end

---@param player number
---@return nil | string
function Character.findClassInZone(player)
    local characterMat = Component.characterMat(player)
    if characterMat then
        return (--[[---@not nil]] characterMat).getDescription()
    end
    return nil
end

---@param player number
---@return nil | gh_Game_Quest_Info
function Character.findQuest(player)
    for _, object in pairs(Component.playerObjects(player)) do
        if Component.isPersonalQuestCard(object) then
            return Component.getQuestInfo(object)
        end
    end
    return nil
end

return Character

local ObjectUtil = require("sebaestschjin-tts.ObjectUtil")
local TableUtil = require("sebaestschjin-tts.TableUtil")
local Utils = require("sebaestschjin-tts.Utils")

local Character = require("gloomhaven-campaign-manager.Character")
local Component = require("gloomhaven-campaign-manager.Component")
local Game = require("gloomhaven-campaign-manager.Game")
local Preparation = require("gloomhaven-campaign-manager.Preparation")
local Quest = require("gloomhaven-campaign-manager.Quest")

local Retirement = {}

local RetirementSheetColumns = 5

---@param retired gh_Save_Retired[]
function Retirement.load(retired)
    Preparation.takeFromGamebox(Component.guids.RETIREMENT_SHEET, Component.positions.RETIREMENT_SHEET)
    Utils.waitForObject(Component.guids.RETIREMENT_SHEET, function() Retirement.startLoading(retired) end)
end

---@param retired gh_Save_Retired[]
function Retirement.startLoading(retired)
    local retirementSheet = --[[---@not nil]] getObjectFromGUID(Component.guids.RETIREMENT_SHEET)

    for i, retirement in ipairs(retired) do
        local row = i - 1
        local offset = row * RetirementSheetColumns

        retirementSheet.editInput({ index = offset + 0, value = retirement.player })
        retirementSheet.editInput({ index = offset + 1, value = retirement.character })
        retirementSheet.editInput({ index = offset + 2, value = retirement.class })
        retirementSheet.editInput({ index = offset + 3, value = retirement.level })
        retirementSheet.editInput({ index = offset + 4, value = retirement.perks })

        if retirement.quest then
            Quest.take(retirement.quest, function(card) card.destruct() end)
        end
    end

    retirementSheet.call("forceSave", {})
end

---@return nil | gh_Save_Retired[]
function Retirement.save()
    local retired = --[[---@type gh_Save_Retired[] ]] {}

    Retirement.saveRetirementSheet(retired)
    Retirement.saveCompletedQuests(retired)

    return TableUtil.emptyToNil(retired)
end

---@param retired gh_Save_Retired[]
function Retirement.saveRetirementSheet(retired)
    local retirementSheet = Component.retirementSheet()
    if not retirementSheet then
        return
    end

    local retiredCharacter = --[[---@type gh_Save_Retired]] {}
    for i, input in pairs((--[[---@not nil]] retirementSheet).getInputs()) do
        local column = (i - 1) % RetirementSheetColumns
        if column == 0 then
            if TableUtil.isNotEmpty(retiredCharacter) then
                table.insert(retired, retiredCharacter)
            end
            retiredCharacter = --[[---@type gh_Save_Retired]] {}
        end

        if input.value ~= "" then
            if column == 0 then
                retiredCharacter.player = input.value
            elseif column == 1 then
                retiredCharacter.character = input.value
            elseif column == 2 then
                retiredCharacter.class = input.value
            elseif column == 3 then
                retiredCharacter.level = --[[---@not nil]] tonumber(input.value)
            elseif column == 4 then
                retiredCharacter.perks = --[[---@not nil]] tonumber(input.value)
            end
        end
    end
    if TableUtil.isNotEmpty(retiredCharacter) then
        table.insert(retired, retiredCharacter)
    end
end

---@param retired gh_Save_Retired[]
function Retirement.saveCompletedQuests(retired)
    local completedQuests = --[[---@type table<string, number> ]] {}
    for name, _ in pairs(Game.QUESTS) do
        completedQuests[name] = 1
    end

    local questDeck = Component.fromDeckMat(Component.snaps.QUESTS)
    for _, quest in pairs(questDeck.getObjects()) do
        local questInfo = --[[---@not nil]] Component.getQuestInfo(quest)
        completedQuests[questInfo.name] = nil
    end

    for _, playerZone in pairs(Component.playerZones()) do
        local playerQuest = Character.findQuest(playerZone)
        if playerQuest then
            completedQuests[(--[[---@not nil]] playerQuest).name] = nil
        end
    end

    local i = 1
    for completed, _ in pairs(completedQuests) do
        if not retired[i] then
            retired[i] = --[[---@type gh_Save_Retired]] {}
        end
        retired[i].quest = completed
        i = i + 1
    end
end

return Retirement

local EventManager = require("ge_tts.EventManager")
local Logger = require("sebaestschjin-tts.Logger")

local Chain = require("sebaestschjin-tts.Chain")
local Search = require("sebaestschjin-tts.Search")
local TableUtil = require("sebaestschjin-tts.TableUtil")
local WrappedDeck = require("sebaestschjin-tts.WrappedDeck")

local Component = require("gloomhaven-campaign-manager.Component")
local EventType = require("gloomhaven-campaign-manager.EventType")
local Game = require("gloomhaven-campaign-manager.Game")

---
--- Handles everything about the Forgotten Circles expansion
---
local Expansion = {}

function Expansion.setup()
    EventManager.addHandler(EventType.Placed.LockedCharacters, function() Expansion.unpack() end)
end

local StartEvent = 82
local NewItemsDeck = "Forgotten Circles Items"

--- Unpacks the expansion box.
function Expansion.unpack()
    Logger.info("Unpacking Forgotten Circles expansion")

    local chain = Chain("Unpack Expansion")

    chain.add(function(c) Expansion.unlockExpansionClass(c, "Diviner") end)

    local customClasses = TableUtil.filter(Game.Classes, function(c) return c.isCustomClass end)
    for _, customClass in pairs(customClasses) do
        chain.add(function(c) Expansion.unlockCustomClass(c, customClass) end)
    end

    for _, info in pairs(Component.EventDecks) do
        local targetDeck = Component.eventDeck(info)
        chain.add(function(c) Expansion.unpackEvents(c, targetDeck, info.name) end)
    end

    chain.add(Expansion.unpackItems)
    chain.add(Expansion.finishUnpack)

    chain.proceed()
end

function Expansion.finishUnpack()
    EventManager.triggerEvent(EventType.Loaded.Expansion)
end

---@param chain seb_Chain
---@param className string
function Expansion.unlockExpansionClass(chain, className)
    Component.forgottenCirclesBox().takeObject({
        guid = Game.class(className).boxGuid,
        smooth = false,
        callback_function = function(obj)
            Component.lockedClasses().putObject(obj)
            chain.proceed()
        end
    })
end

---@param chain seb_Chain
---@param class gh_Game_Class
function Expansion.unlockCustomClass(chain, class)
    local customClassBox = getObjectFromGUID(class.boxGuid)
    if customClassBox then
        Component.lockedClasses().putObject(--[[---@not nil]] customClassBox)
    end
    chain.proceed()
end

--- Unpacks the additional event cards.
---@param chain seb_Chain
---@param targetDeck seb_WrappedDeck
---@param deckName string
function Expansion.unpackEvents(chain, targetDeck, deckName)
    local forgottenCirclesBox = Component.forgottenCirclesBox()
    local newEvents = --[[---@not nil]] Search.inContainer(forgottenCirclesBox, { name = deckName })

    forgottenCirclesBox.takeObject({
        index = newEvents.index,
        position = Component.safePosition(),
        rotation = targetDeck.getRotation(),
        smooth = false,
        callback_function = function(obj) Expansion.unpackEventDeck(chain, WrappedDeck(--[[---@type tts__Deck]] obj), targetDeck) end,
    })
end

---@param chain seb_Chain
---@param expansionDeck seb_WrappedDeck @The event deck to unpack
---@param targetDeck seb_WrappedDeck @The event deck where the new events will be placed
function Expansion.unpackEventDeck(chain, expansionDeck, targetDeck)
    for i, _ in ipairs(expansionDeck.getObjects()) do
        chain.addNext(function(c) Expansion.placeAndNameEventCard(c, expansionDeck, targetDeck, i) end)
    end

    chain.proceed()
end

---@param chain seb_Chain
---@param expansionDeck seb_WrappedDeck @The event deck to unpack
---@param targetDeck tts__Deck @The event deck where the new events will be placed
---@param index number
function Expansion.placeAndNameEventCard(chain, expansionDeck, targetDeck, index)
    expansionDeck.takeObject({
        index = index - 1,
        position = Component.safePosition(),
        smooth = false,
        callback_function = function(card)
            card.setName(tostring((index - 1) + StartEvent))
            targetDeck.putObject(card)
            Wait.frames(chain.proceed, 1)
        end
    })
end

---@param chain seb_Chain
---@return boolean
function Expansion.unpackItems(chain)
    local forgottenCirclesBox = Component.forgottenCirclesBox()
    local newItems = --[[---@not nil]] Search.inContainer(forgottenCirclesBox, { name = NewItemsDeck })
    local targetDeck = Component.rewardItemsDeck()

    forgottenCirclesBox.takeObject({
        guid = newItems.guid,
        position = Component.safePosition(),
        rotation = targetDeck.getRotation(),
        smooth = false,
        callback_function = function(obj)
            targetDeck.putObject(--[[---@type tts__Card]] obj)
            Wait.frames(chain.proceed, 1)
        end
    })

    return false
end

return Expansion

local Chain = require("sebaestschjin-tts.Chain")
local Object = require("sebaestschjin-tts.Object")
local Search = require("sebaestschjin-tts.Search")
local WrappedDeck = require("sebaestschjin-tts.WrappedDeck")

local Component = require("gloomhaven-campaign-manager.Component")
local Event = require("gloomhaven-campaign-manager.Event")

-- TODO use events instead of chain

---
--- Handles everything about the Forgotten Circles expansion
---
local Expansion = {}

local StartEvent = 82
local NewItemsDeck = "Forgotten Circles Items"

--- Unpacks the expansion box.
---@param callback common_ChainCallback
function Expansion.unpack(callback)
    local chain = Chain.create()

    for _, info in pairs(Event.EventDecks) do
        local targetDeck = --[[---@type tts__Deck]] getObjectFromGUID(info.deckGuid)
        chain.add(function(c) Expansion.unpackEvents(c, targetDeck, info.name) end)
    end

    chain.add(Expansion.unpackItems)

    chain.add(callback)
    chain.proceed()
end

--- Unpacks the additional event cards.
---@param chain common_Chain
---@param targetDeck tts__Deck
---@param deckName string
function Expansion.unpackEvents(chain, targetDeck, deckName)
    local forgottenCirclesBox = Component.forgottenCirclesBox()
    local newEvents = --[[---@not nil]] Search.inContainer(forgottenCirclesBox, { name = deckName })

    forgottenCirclesBox.takeObject({
        guid = newEvents.guid,
        position = Component.getSafePosition(),
        rotation = targetDeck.getRotation(),
        smooth = false,
        callback_function = function(obj) Expansion.unpackEventDeck(chain, WrappedDeck(--[[---@type tts__Deck]] obj), targetDeck) end,
    })
end

---@param chain common_Chain
---@param expansionDeck seb_WrappedDeck @The event deck to unpack
---@param targetDeck tts__Deck @The event deck where the new events will be placed
function Expansion.unpackEventDeck(chain, expansionDeck, targetDeck)
    for i, _ in ipairs(expansionDeck.getObjects()) do
        chain.addNext(function(c) Expansion.placeAndNameEventCard(c, expansionDeck, targetDeck, i) end)
    end

    chain.proceed()
end

---@param chain common_Chain
---@param expansionDeck seb_WrappedDeck @The event deck to unpack
---@param targetDeck tts__Deck @The event deck where the new events will be placed
---@param index number
---@return boolean
function Expansion.placeAndNameEventCard(chain, expansionDeck, targetDeck, index)
    expansionDeck.takeObject({
        index = index - 1,
        position = Component.getSafePosition(),
        smooth = false,
        callback_function = function(card)
            card.setName(tostring((index - 1) + StartEvent))
            targetDeck.putObject(card)
            Wait.frames(chain.proceed, 1)
        end
    })
    return false
end

---@param chain common_Chain
---@return boolean
function Expansion.unpackItems(chain)
    local forgottenCirclesBox = Component.forgottenCirclesBox()
    local newItems = --[[---@not nil]] Search.inContainer(forgottenCirclesBox, { name = NewItemsDeck })
    local targetDeck = Component.rewardItemsDeck()

    forgottenCirclesBox.takeObject({
        guid = newItems.guid,
        position = Component.getSafePosition(),
        rotation = targetDeck.getRotation(),
        smooth = false,
        callback_function = function(obj)
            targetDeck.putObject(--[[---@type tts__Card]] obj)
            Wait.frames(chain.proceed, 1)
        end
    })

    return false
end

return Expansion

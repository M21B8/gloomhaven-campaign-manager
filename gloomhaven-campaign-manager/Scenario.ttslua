local Logger = require("sebaestschjin-tts.Logger")
local TableUtil = require("sebaestschjin-tts.TableUtil")
local Utils = require("sebaestschjin-tts.Utils")

local Component = require("gloomhaven-campaign-manager.Component")
local Game = require("gloomhaven-campaign-manager.Game")

local Scenario = {}

local State = {
    OPEN = "Open",
    DONE = "Done",
    LOCKED = "Locked",
}

---@param scenarios gh_Save_Scenario[]
function Scenario.loadAll(scenarios)
    local scenarioStickers = --[[---@type fantasySetup_Scenario_Stickers]] Component.map().getTable("tableML")

    for _, scenario in pairs(scenarios) do
        local number, state = scenario.number, scenario.state
        local stickerGuid = Scenario.findStickerGuid(scenarioStickers, number)
        Scenario.placeSticker(stickerGuid, number, state)

        if Scenario.isRandomScenario(number) then
            Scenario.removeRandomScenario(number)
        end
    end
end

---@param scenarioStickers fantasySetup_Scenario_Stickers
---@param number number
---@return GUID
function Scenario.findStickerGuid(scenarioStickers, number)
    for stickerGuid, info in pairs(scenarioStickers) do
        if info.number == number then
            return stickerGuid
        end
    end
end

---@param stickerGuid GUID
---@param number number
---@param state gh_Scenario_State
function Scenario.placeSticker(stickerGuid, number, state)
    Logger.verbose("Placing scenario " .. tostring(number) .. " as " .. state)
    local map = Component.map()
    if state == State.OPEN then
        map.call("clickedML", stickerGuid)
    elseif state == State.DONE then
        map.call("clickedML", stickerGuid)
        map.call("oneClick", { stickerGuid })
    elseif state == State.LOCKED then
        map.call("clickedML", stickerGuid)
        map.call("triClick", { stickerGuid })
    end
end

---@param number number
---@return boolean
function Scenario.isRandomScenario(number)
    return Game.RANDOM_SCENARIOS[number] ~= nil
end

---@param number number
function Scenario.removeRandomScenario(number)
    local deck = Component.fromDeckMat(Component.snaps.RANDOM_SCENARIOS)
    if not deck then
        Logger.error("Can't remove random scenarios. Nothing found at expected position.")
        return
    end

    local cardId = Component.getCardId(Component.deckIds.RANDOM_SCENARIOS, Game.RANDOM_SCENARIOS[number])
    local scenarioCard = Utils.findObjectIn(deck, { cardId = cardId })
    if not scenarioCard then
        Logger.error("Can't find the random scenario " .. number .. " in the deck. Can't remove the card.")
        return
    end

    deck.takeObject({
        index = scenarioCard.index,
        position = Component.getSafePosition(),
        callback_function = function(obj) obj.destruct() end,
    })
end

function Scenario.save()
    local scenarios = {}
    local map = Component.map()
    local scenarioStickers = --[[---@type fantasySetup_Scenario_Stickers]] map.getTable("tableML")
    local unlockedScenarios = map.getTable("locations")

    for stickerGuid, info in pairs(scenarioStickers) do
        if getObjectFromGUID(stickerGuid) ~= nil and info.number ~= nil then
            local state = State.OPEN
            if unlockedScenarios[stickerGuid] then
                if unlockedScenarios[stickerGuid][1] == 1 then
                    state = State.LOCKED
                else
                    state = State.DONE
                end
            end
            table.insert(scenarios, { number = info.number, state = state })
        end
    end

    return TableUtil.emptyToNil(scenarios)
end

return Scenario

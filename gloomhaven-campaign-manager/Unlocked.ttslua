local Constant = require("sebaestschjin-tts.Constant")
local EventManager = require('ge_tts.EventManager')
local Logger = require('sebaestschjin-tts.Logger')
local Utils = require("sebaestschjin-tts.Utils")
local Search = require("sebaestschjin-tts.Search")

local Component = require("gloomhaven-campaign-manager.Component")
local EventType = require("gloomhaven-campaign-manager.EventType")
local Game = require("gloomhaven-campaign-manager.Game")
local Preparation = require("gloomhaven-campaign-manager.Preparation")
local Sanctuary = require("gloomhaven-campaign-manager.Sanctuary")
local Shop = require("gloomhaven-campaign-manager.Shop")

local Unlocked = {}

---@param unlocked gh_Save_Unlocked
function Unlocked.loadAll(unlocked)
    Sanctuary.load(unlocked.sanctuary)
    Unlocked.loadOpeningConditions(unlocked.specialConditions)
    Unlocked.loadTreasures(unlocked.treasures)
end

---@param saveFile gh_Savefile
---@param className string
function Unlocked.mayLoadClass(saveFile, className)
    for i, unlockedClass in ipairs(saveFile.unlocked.classes) do
        if unlockedClass == className then
            Unlocked.loadClass(i, className)
            return
        end
    end
    EventManager.triggerEvent(EventType.Load.Class.Unlocked, className)
end

---@param number number
---@param className string
function Unlocked.loadClass(number, className)
    Logger.info('Unlocking class %s', className)

    local lastBox = Component.lastCharacterBox()
    local beforeLastBox = Component.beforeLastCharacterBox()
    local delta = (lastBox.getPosition() - beforeLastBox.getPosition()) * number

    Component.lockedClasses().takeObject({
        position = lastBox.getPosition() + delta,
        rotation = lastBox.getRotation(),
        smooth = false,
        guid = Game.class(className).boxGuid,
        callback_function = function(obj)
            obj.setLock(true)
            EventManager.triggerEvent(EventType.Load.Class.Unlocked, className)
        end
    })
end

---@param saveFile gh_Savefile
function Unlocked.loadItems(saveFile)
    local shopPosition = Component.shopDeck().getPosition()

    for _, item in pairs(saveFile.unlocked.items) do
        Shop.takeRewardItem(item, shopPosition)
    end

    EventManager.triggerEvent(EventType.Load.Items)
end

---@param openingConditions gh_Save_Unlocked_Conditions
function Unlocked.loadOpeningConditions(openingConditions)
    Preparation.takeFromGamebox(Component.guids.OPENING_CONDITIONS, Component.positions.OPENING_CONDITIONS)
    Utils.waitForObject(Component.guids.OPENING_CONDITIONS,
            function() Unlocked.doLoadOpeningConditions(openingConditions) end)
end

---@param openingConditions gh_Save_Unlocked_Conditions
function Unlocked.doLoadOpeningConditions(openingConditions)
    local sheet = --[[---@not nil]] Component.openingConditions()

    Unlocked.setOpeningCondition(sheet, openingConditions.ancientTechnology, "Ancient")
    Unlocked.setOpeningCondition(sheet, openingConditions.drakeAided, "Drake")
    Unlocked.setOpeningCondition(sheet, openingConditions.lowReputation, "RepN10")
    Unlocked.setOpeningCondition(sheet, openingConditions.lowestReputation, "RepN20")
    Unlocked.setOpeningCondition(sheet, openingConditions.highReputation, "Rep10")
    Unlocked.setOpeningCondition(sheet, openingConditions.highestReputation, "Rep20")

    if openingConditions.retired then
        sheet.call("clickedToggle", "Retire")
        Component.gamebox().takeObject({
            guid = Component.guids.TOWN_RECORDS,
            position = Component.positions.TOWN_RECORDS,
            rotation = Constant.Rotation.NORTH,
            smooth = false
        })
    end

    for i = 1, openingConditions.donations do
        Unlocked.setOpeningCondition(sheet, true, "Donation" .. i)
    end
    if openingConditions.donations >= 10 then
        Unlocked.setOpeningCondition(sheet, true, "DonationFull")
    end
end

---@param sheet tts__Object
---@param done boolean
---@param conditionName string
function Unlocked.setOpeningCondition(sheet, done, conditionName)
    if done then
        sheet.call("clickedToggle", conditionName)
    end
end

---@param treasures number[]
function Unlocked.loadTreasures(treasures)
    local treasureDeck = --[[---@not nil]] Component.treasureDeck()

    for _, treasure in ipairs(treasures) do
        local treasureCard = Search.inContainer(treasureDeck, { name = tostring(treasure) })
        if not treasureCard then
            Logger.error("Treasure '%s' does not exist. Treasure won't be loaded.", treasure)
        else
            treasureDeck.takeObject({
                index = (--[[---@not nil]] treasureCard).index,
                position = Component.getSafePosition(),
                callback_function = function(obj) obj.destruct() end,
            })
        end
    end

    EventManager.triggerEvent(EventType.Load.Treasure)
end

---@param saveFile gh_Savefile
function Unlocked.saveAll(saveFile)
    Unlocked.saveClasses(saveFile.unlocked.classes)
    saveFile.unlocked.sanctuary = Sanctuary.save()
    Unlocked.saveOpeningConditions(saveFile.unlocked.specialConditions)
    Unlocked.saveTreasures(saveFile.unlocked.treasures)
    Shop.save(saveFile.unlocked)
end

---@param classes string[]
function Unlocked.saveClasses(classes)
    for className, info in pairs(Game.CLASSES) do
        local box = Component.classBox(className)
        if box ~= nil and not info.isStartingClass then
            table.insert(classes, className)
        end
    end
end

---@param openingConditions gh_Save_Unlocked_Conditions
function Unlocked.saveOpeningConditions(openingConditions)
    local openingConditionsSheet = Component.openingConditions()
    if not openingConditionsSheet then
        return
    end

    local buttons = (--[[---@not nil]] openingConditionsSheet).getTable("buttons")
    openingConditions.ancientTechnology = buttons["Ancient"].label ~= ""
    openingConditions.drakeAided = buttons["Drake"].label ~= ""
    openingConditions.lowReputation = buttons["RepN10"].label ~= ""
    openingConditions.lowestReputation = buttons["RepN20"].label ~= ""
    openingConditions.highReputation = buttons["Rep10"].label ~= ""
    openingConditions.highestReputation = buttons["Rep20"].label ~= ""
    openingConditions.retired = buttons["Retire"].label ~= ""
    local donations = 0
    for i = 1, 10 do
        if buttons["Donation" .. i].label ~= "" then
            donations = donations + 1
        end
    end
    openingConditions.donations = donations
end

---@param treasures number[]
function Unlocked.saveTreasures(treasures)
    local treasureDeck, _ = Search.inContainedObjects(Component.gamebox(), { guid = Component.guids.TREASURE_DECK })

    if not treasureDeck then
        Logger.warn("Could not find the treasure deck in the gamebox. Can not save unlocked treasures.")
        return
    end

    local allTreasures = --[[---@type table<number, boolean>]] {}
    for i = 1, 96 do
        allTreasures[i] = true
    end

    local treasureCards = (--[[---@type tts__ContainerState]] treasureDeck).ContainedObjects
    for _, treasureCard in pairs(treasureCards) do
        local cardName = --[[---@not nil]] treasureCard.Nickname
        local treasureNumber = --[[---@not nil]] tonumber(cardName:sub(-2))
        allTreasures[treasureNumber] = false
    end

    for treasure, unlocked in pairs(allTreasures) do
        if unlocked then
            table.insert(treasures, treasure)
        end
    end
end

return Unlocked

local Object = require("sebaestschjin-tts.Object")
local Search = require("sebaestschjin-tts.Search")
local StringUtil = require("sebaestschjin-tts.StringUtil")
local TableUtil = require("sebaestschjin-tts.TableUtil")
local Utils = require("sebaestschjin-tts.Utils")
local WrappedDeck = require("sebaestschjin-tts.WrappedDeck")

local Game = require("gloomhaven-campaign-manager.Game")

local Component = {}

Component.guids = {
    GAMEBOX = "346ed5",
    LOCKED_CLASSES = "1e6549",
    SCENARIO_BOOK = "f3404a",
    RULE_BOOK = "c9d3f5",
    OPENING_CONDITIONS = "30ae8e",
    RETIREMENT_SHEET = "a30c94",
    TOWN_RECORDS = "a6c771",
    FORGOTTEN_CIRCLES_BOX = "5e28e8",
    MAP = "9cc037",
    AchievementBag = "3ea749", -- Bag containing the Achievement board
    AchievementBoard = { "43d5b8", "546b57" },
    SANCTUARY_STICKER = "800847",
    DECK_MAT = "a75fcd",
    PLAYER_MINUS_ONE_DECK = "74a2ed",
    CITY_EVENTS_DECK_INITIAL = "759349",
    CITY_EVENTS_DECK = "f13efd",
    ROAD_EVENTS_DECK_INITIAL = "83de73",
    ROAD_EVENTS_DECK = "f08b69",
    CITY_MAT = "f3ffb7",
    EVENTS_MAT = "b53fb2",
    OLD_EVENT_MAT = "41393b",
    PARTY_SHEET = "6d3de2",
    LAST_BOX = "fdef02", -- tinkerer
    BEFORE_LAST_BOX = "ec1d2a", -- cragheart
    TREASURE_DECK = "284016",
    ---@type GUID[]
    ZONES = { "49a4e0", "dac936", "62cd94", "963318" },
    ---@type GUID[]
    ADD_PLAYERS = { "3f0cda", "4d61da", "f98ff8", "d0f661" },
}

Component.deckIds = {}
---@type number[]
Component.deckIds.QUESTS = { 1753, 1997 }
Component.deckIds.RANDOM_SCENARIOS = 1930

Component.names = {
    PLAYER_MAT = "Player Mat",
    CHARACTER_MAT = "Character Mat",
    CHARACTER_SHEET = "Character Sheet",
    ABILITY_DECK = "Advanced Abilities",
    STARTING_ABILITY_DECK = "Starting Abilities",
    MODIFIER_DECK = "Attack Modifiers",
    ATTACK_MODIFIER = "Attack Modifier",
    ROAD_EVENTS = "Road Events",
    CITY_EVENTS = "City Events",
    AchievementBoard = "Achievements",
    InactiveCharacter = "Repacked",
}

---@type table<string, tts__VectorShape>
Component.positions = {}
Component.positions.QUEST_CARD = Vector(1, 2, -19) -- relative to player zone
Component.positions.ITEM_UNEQUIPPED = Vector(-7, 2, -7) -- relative to player zone
Component.positions.SECOND_HAND = Vector(0, 3, -2) -- relative to player zone

Component.positions.ACHIEVEMENT_BOARD = { 87.26, 2, 26.12 }
Component.positions.OPENING_CONDITIONS = Vector(65.19, 1.70, -29.55)
Component.positions.RETIREMENT_SHEET = Vector(77.88, 1.70, -33.34)
Component.positions.SCENARIO_BOOK = { 63.88, 2, 37.89 }
Component.positions.RULE_BOOK = { -64.31, 2, -41.68 }
Component.positions.TOWN_RECORDS = { 73.94, 2, 34.10 }
Component.positions.TREASURE_DECK = { -75, 2, -5.3 }

function Component.positions.relativeToZone(zoneGuid, position)
    return (--[[---@not nil]] getObjectFromGUID(zoneGuid)).getPosition() + position
end

local positionCounter = 0
function Component.getSafePosition()
    positionCounter = positionCounter + 1
    return Vector(-43 + (positionCounter * 3), 2, -85)
end

Component.snaps = {}

---@type table<gh_Save_Character_Item_Position, number>
Component.PlayerMatSnapPoints = {
    Head = 15,
    Armor = 16,
    HandLeft = 17,
    HandRight = 18,
    Boots = 19,
    Bag1 = 12,
    Bag2 = 13,
    Bag3 = 14,
    Active4 = 9,
    Active1 = 6,
    Active3 = 8,
    Active2 = 7,
}

local DeckMatSnapPoints = {
    RandomScenarios = 8,
    Quests = 11,
}

local CityMatSnapPoints = {
    Shop = 1,
    RewardItems = 13,
}

-- Event Mat
Component.snaps.ROAD_EVENTS_DECK = 1
Component.snaps.CITY_EVENTS_DECK = 2
Component.snaps.RIFT_EVENTS = 3

---@param customDeck number | number[]
---@param index number
---@return number
function Component.getCardId(customDeck, index)
    if type(customDeck) == "table" then
        customDeck = (--[[---@type number[] ]] customDeck)[#customDeck]
    end
    return --[[---@not nil]] tonumber(string.format("%d%02d", customDeck, index))
end

--------------------------------------------------------------------------------
--- Gamebox-Content ------------------------------------------------------------
--------------------------------------------------------------------------------

---@return tts__Bag
function Component.gamebox()
    return --[[---@type tts__Bag]] getObjectFromGUID(Component.guids.GAMEBOX)
end

---@return tts__Bag
function Component.forgottenCirclesBox()
    return --[[---@type tts__Bag]] getObjectFromGUID(Component.guids.FORGOTTEN_CIRCLES_BOX)
end

---@return tts__Bag
function Component.lockedClasses()
    return --[[---@type tts__Bag]] getObjectFromGUID(Component.guids.LOCKED_CLASSES)
end

---@return nil | tts__Deck
function Component.treasureDeck()
    return --[[---@type nil | tts__Deck]] getObjectFromGUID(Component.guids.TREASURE_DECK)
end

---@return nil | tts__Object
function Component.retirementSheet()
    return getObjectFromGUID(Component.guids.RETIREMENT_SHEET)
end

---@return nil | tts__Object
function Component.openingConditions()
    return getObjectFromGUID(Component.guids.OPENING_CONDITIONS)
end

--------------------------------------------------------------------------------
--- General --------------------------------------------------------------------
--------------------------------------------------------------------------------

---@return tts__Bag
function Component.lastCharacterBox()
    return --[[---@type tts__Bag]] getObjectFromGUID(Component.guids.LAST_BOX)
end

---@return tts__Bag
function Component.beforeLastCharacterBox()
    return --[[---@type tts__Bag]] getObjectFromGUID(Component.guids.BEFORE_LAST_BOX)
end

---@return tts__Object
function Component.map()
    return --[[---@not nil]] getObjectFromGUID(Component.guids.MAP)
end

---@return tts__Bag
function Component.achievementsBag()
    return --[[---@type tts__Bag]] getObjectFromGUID(Component.guids.AchievementBag)
end

---@return GUID
function Component.achievementBoardGuid()
    for _, achievementBoard in ipairs(Component.guids.AchievementBoard) do
        local board = getObjectFromGUID(achievementBoard)
        if board then
            return achievementBoard
        end
    end

    local achievementBag = Component.achievementsBag()
    local achievementBoard = --[[---@not nil]] Search.inContainer(achievementBag, { name = Component.names.AchievementBoard })
    return achievementBoard.guid
end

---@return tts__VectorShape
function Component.achievementBoardPosition()
    return { 87.26, 2, 26.12 }
end

---@return tts__Object
function Component.partySheet()
    return --[[---@not nil]] getObjectFromGUID(Component.guids.PARTY_SHEET)
end

---@return nil | tts__Object
function Component.sanctuarySticker()
    return getObjectFromGUID(Component.guids.SANCTUARY_STICKER)
end

--------------------------------------------------------------------------------
--- City-Mat -------------------------------------------------------------------
--------------------------------------------------------------------------------

---@return tts__Object
function Component.cityMat()
    return --[[---@not nil]] getObjectFromGUID(Component.guids.CITY_MAT)
end

---@param snapPoint number
---@return seb_WrappedDeck
local function fromCityMat(snapPoint)
    local deckPosition = Utils.getSnapPosition(Component.cityMat(), snapPoint)
    return WrappedDeck(deckPosition)
end

---@return seb_WrappedDeck
function Component.shopDeck()
    return fromCityMat(CityMatSnapPoints.Shop)
end

---@return seb_WrappedDeck
function Component.rewardItemsDeck()
    return fromCityMat(CityMatSnapPoints.RewardItems)
end

--------------------------------------------------------------------------------
--- Deck-Mat -------------------------------------------------------------------
--------------------------------------------------------------------------------

---@return tts__Object
function Component.deckMat()
    return --[[---@not nil]] getObjectFromGUID(Component.guids.DECK_MAT)
end

---@param snapPoint number
---@return seb_WrappedDeck
local function fromDeckMat(snapPoint)
    local deckPosition = Utils.getSnapPosition(Component.deckMat(), snapPoint)
    return WrappedDeck(deckPosition)
end

---@return seb_WrappedDeck
function Component.questDeck()
    return fromDeckMat(DeckMatSnapPoints.Quests)
end

---@return seb_WrappedDeck
function Component.randomScenarioDeck()
    return fromDeckMat(DeckMatSnapPoints.RandomScenarios)
end

---@return tts__Deck
function Component.minusOneDeck()
    return --[[---@type tts__Deck]] getObjectFromGUID(Component.guids.PLAYER_MINUS_ONE_DECK)
end

--------------------------------------------------------------------------------
--- Event Mat ------------------------------------------------------------------
--------------------------------------------------------------------------------

---@return tts__Object
function Component.eventMat()
    return --[[---@not nil]] getObjectFromGUID(Component.guids.EVENTS_MAT)
end

---@return nil | tts__Object
function Component.eventMatOld()
    return getObjectFromGUID(Component.guids.OLD_EVENT_MAT)
end

--------------------------------------------------------------------------------
--- Character specific ---------------------------------------------------------
--------------------------------------------------------------------------------

---@param className string
---@return nil | tts__Bag
function Component.classBox(className)
    return --[[---@type nil | tts__Bag]] getObjectFromGUID(Game.class(className).boxGuid)
end

--- Returns the contained character box within a class box for the given class.
---@param classBox tts__Bag
---@return tts__ContainerState
function Component.characterBox(classBox)
    return --[[---@type tts__ContainerState]] classBox.getData().ContainedObjects[1]
end

---@param object seb_Object
function Component.isAbilityDeck(object)
    if not Object.isDeck(object) then
        return false
    end
    local name = Object.name(object)
    return name:find(Component.names.ABILITY_DECK) or name:find(Component.names.STARTING_ABILITY_DECK)
end

---@return seb_WrappedDeck
function Component.abilityDeck(playerZone)
    local abilityDeck = --[[---@type tts__Deck]] Search.inZone(Component.playerZone(playerZone), { name = Component.names.ABILITY_DECK })
    return WrappedDeck(abilityDeck)
end

---@param object seb_Object
---@param className string
function Component.isAbilityCardForClass(object, className)
    local name = Object.name(object)

    if not Object.isCard(object)
            or not Object.description(object):find(className)
            or name:find(Component.names.ATTACK_MODIFIER) then
        return false
    end

    local cardName = StringUtil.replace(name, "[%(%)]%d%d[%)%(]")
    local nearest, _ = Game.nearestAbility(className, cardName)
    return nearest ~= nil
end

---@param className string
---@param abilityName string
function Component.isStartingAbility(className, abilityName)
    local ability = --[[---@not nil]] Game.ability(className, abilityName)
    return ability.level == 1 or ability.level == "X"
end

---@param class string
---@param abilityCard seb_Object
---@return string
function Component.getAbilityName(class, abilityCard)
    local cardName = StringUtil.replace(Object.name(abilityCard), "%s?[%(%)]%d+[%)%(]")
    return --[[---@not nil]] (--[[---@not nil]] Game.ability(class, cardName)).name
end

---@return tts__Bag[]
function Component.inactiveCharacters()
    return --[[---@type tts__Bag[] ]] TableUtil.filter(getObjects(), function(obj)
        return Object.isBag(obj) and obj.getDescription() == Component.names.InactiveCharacter
    end)
end

--------------------------------------------------------------------------------
--- Player specific ------------------------------------------------------------
--------------------------------------------------------------------------------

---@return GUID[]
function Component.playerZones()
    return Component.guids.ZONES
end

---@param playerZone GUID
---@return tts__ScriptingTrigger
function Component.playerZone(playerZone)
    return --[[---@type tts__ScriptingTrigger]] getObjectFromGUID(playerZone)
end

--- Returns all objects of the given playerZone. Only objects which center is within the planar bounds of the zone are
--- returned. This avoids duplicated items that overlap multiple zones.
---@param zoneGuid GUID
---@return tts__Object[]
function Component.getObjectsInZone(zoneGuid)
    local zone = --[[---@type tts__ScriptingTrigger]] getObjectFromGUID(zoneGuid)
    return TableUtil.filter(zone.getObjects(),
            function(object)
                return Component.isObjectInZone(zone, --[[---@type tts__Object]] object)
            end)
end

---@param playerZone tts__ScriptingTrigger
---@param object tts__Object
---@return boolean
function Component.isObjectInZone(playerZone, object)
    local width = playerZone.getScale().x
    local height = playerZone.getScale().z
    local zoneCenter = playerZone.getBounds().center
    local left = zoneCenter.x - width / 2
    local right = zoneCenter.x + width / 2
    local top = zoneCenter.z + height / 2
    local bottom = zoneCenter.z - height / 2
    local objectCenter = object.getBounds().center

    return objectCenter.x > left and objectCenter.x < right and objectCenter.z > bottom and objectCenter.z < top
end

---@return GUID[]
function Component.playerButtons()
    return Component.guids.ADD_PLAYERS
end

---@param index number
---@return tts__Object
function Component.playerButton(index)
    return --[[---@not nil]] getObjectFromGUID(Component.guids.ADD_PLAYERS[index])
end

---@param playerZone GUID
---@return tts__Object
function Component.playerMat(playerZone)
    local zone = --[[---@type tts__ScriptingTrigger]] getObjectFromGUID(playerZone)
    local matName = Component.names.PLAYER_MAT
    return --[[---@not nil]] Search.inZone(zone, { name = matName, isPattern = true })
end

---@return nil | tts__Object
function Component.characterMat(playerZone)
    return Search.inZone(Component.playerZone(playerZone), { name = Component.names.CHARACTER_MAT })
end

---@param playerZone GUID
---@return tts__Object
function Component.characterSheet(playerZone)
    return --[[---@not nil]] Search.inZone(Component.playerZone(playerZone), { name = Component.names.CHARACTER_SHEET })
end

---@param playerZone GUID
---@return tts__Deck
function Component.attackModifiers(playerZone)
    local search = { name = Component.names.MODIFIER_DECK, description = "Player", isPattern = true }
    return --[[---@type tts__Deck]] Search.inZone(Component.playerZone(playerZone), search)
end

---@param playerZone GUID
---@return seb_WrappedDeck
function Component.additionalAttackModifiers(playerZone)
    for _, obj in ipairs(Component.playerZone(playerZone).getObjects()) do
        if obj.type == Object.Type.Deck
                and obj.getName() == Component.names.MODIFIER_DECK
                and obj.getDescription() == "" then
            return WrappedDeck(--[[---@type tts__Deck]] obj)
        end
    end
end

---@param playerZone GUID
---@return tts__VectorShape
function Component.secondHandPosition(playerZone)
    return Component.positions.relativeToZone(playerZone, Component.positions.SECOND_HAND)
end

---@param playerZone GUID
---@return tts__VectorShape
function Component.questPosition(playerZone)
    return Component.positions.relativeToZone(playerZone, Component.positions.QUEST_CARD)
end

--------------------------------------------------------------------------------
--- Specific cards -------------------------------------------------------------
--------------------------------------------------------------------------------

--- Returns true if the given object is an item card.
---@param object seb_Object
function Component.isItemCard(object)
    return Object.isCard(object)
            and (Component.isItemCardDescription(Object.description(object))
            or Game.ITEMS.List[Object.name(object)] ~= nil)
end

--- Returns true if the given item card object is an item from the rewards or item design deck.
---@param item seb_Object
---@param prosperityLevel nil | number
function Component.isRewardItemCard(item, prosperityLevel)
    if not Component.isItemCard(item) then
        return false
    end

    prosperityLevel = prosperityLevel or 1
    if Object.description(item) == "" then
        local itemInfo = Game.ITEMS.List[Object.name(item)]
        return itemInfo.reward ~= nil or itemInfo.prosperity > prosperityLevel
    else
        local description = Object.description(item)
        description = StringUtil.replace(description, "red")
        description = StringUtil.replace(description, "blue")
        return tonumber(description) > Game.ITEMS.Prosperity[--[[---@not nil]] prosperityLevel]
    end
end

--- Returns true if the given object description is a possible item card's description.
function Component.isItemCardDescription(description)
    return description:find("^%d+$")
            or description:find("^%d+ red$")
            or description:find("^%d+ blue$")
end

---@param object seb_Object
function Component.isPersonalQuestCard(object)
    local customDeck = (--[[---@type tts__DeckCustomState]] Object.data(object)).CustomDeck
    if not Object.isCard(object) or not customDeck then
        return false
    end

    for key, _ in pairs(customDeck) do
        return TableUtil.contains(Component.deckIds.QUESTS, key)
    end
end

---@param object seb_Object
---@return nil | gh_Game_Quest_Info
function Component.getQuestInfo(object)
    local cardId = Object.data(object).CardID
    local cardIndex = tonumber(tostring(cardId):sub(-2, -1))
    for name, quest in pairs(Game.QUESTS) do
        if quest.index == cardIndex then
            return { name = name, index = quest.index, number = quest.number }
        end
    end

    return nil
end

return Component

local EventManager = require("ge_tts.EventManager")
local Object = require("sebaestschjin-tts.Object")
local Search = require("sebaestschjin-tts.Search")
local StringUtil = require("sebaestschjin-tts.StringUtil")
local TableUtil = require("sebaestschjin-tts.TableUtil")
local Utils = require("sebaestschjin-tts.Utils")
local WrappedDeck = require("sebaestschjin-tts.WrappedDeck")

local EventType = require("gloomhaven-campaign-manager.EventType")
local Game = require("gloomhaven-campaign-manager.Game")

---
--- Handles everything about the different game components required to load and save a Gloomhaven-Campaign. Has methods
--- to locate and place those components.
---
local Component = {}

--- A list of GUIDs of relevant components.
---@type table<string, GUID>
local Guid = {
    Gamebox = "346ed5",
    LockedClasses = "1e6549",
    ScenarioBook = "f3404a",
    RuleBook = "c9d3f5",
    OpeningConditions = "30ae8e",
    RetirementSheet = "a30c94",
    TownRecords = "a6c771",
    ForgottenCirclesBox = "5e28e8",
    Map = "9cc037",
    AchievementBag = "3ea749", -- Bag containing the Achievement board
    SanctuarySticker = "800847",
    DeckMat = "a75fcd",
    CityEventsDeckInitial = "759349",
    CityEventsDeck = "f13efd",
    RoadEventsDeckInitial = "83de73",
    RoadEventsDeck = "f08b69",
    CityMat = "f3ffb7",
    TreasureDeck = "284016",
    PlayerMinusOneDeck = "74a2ed",
    EventsMat = "b53fb2",
    OldEventsMat = "41393b",
    PartySheet = "6d3de2",
    LastBox = "fdef02", -- tinkerer
    BeforeLastBox = "ec1d2a", -- cragheart
}

--- A list of components with multiple GUIDs (e.g. where newer versions have different GUIDs) or where multiple objects exist.
---@type table<string, GUID[]>
local Guids = {
    Zones = { "49a4e0", "dac936", "62cd94", "963318" },
    AddPlayers = { "3f0cda", "4d61da", "f98ff8", "d0f661" },
    AchievementBoard = { "43d5b8", "546b57" },
}

--- A list of CustomDeck-IDs to identify cards. May have multiple entries if newer version have other IDs.
---@type table<string, number[]>
local DeckIds = {
    Quests = { 1753, 1997 },
    RandomScenarios = { 1930 },
}

--- A list of names to identify components by.
---@type table<string, string>
local Names = {
    CharacterMat = "Character Mat",
    AbilityDeck = "Advanced Abilities",
    StartingAbilityDeck = "Starting Abilities",
    AttackModifierDeck = "Attack Modifiers",
    AchievementBoard = "Achievements",
    InactiveCharacter = "Repacked",
    PlayerMat = "Player Mat",
    CharacterSheet = "Character Sheet",
    AttachModifierCard = "Attack Modifier",
    RoadEventsDeck = "Road Events",
    CityEventsDeck = "City Events",
}

--- A list of positions where components should be placed.
---@type table<string, tts__VectorShape>
local Positions = {
    -- relative
    QuestCard = { 1, 2, -19 },
    ItemUnequipped = { -7, 2, -7 },
    SecondHand = { 0, 3, -2 },
    -- absolute
    AchievementBoard = { 87.26, 2, 26.12 },
    OpeningConditions = { 65.19, 1.70, -29.55 },
    RetirementSheet = { 77.88, 1.70, -33.34 },
    ScenarioBook = { 63.88, 2, 37.89 },
    RuleBook = { -64.31, 2, -41.68 },
    TownRecords = { 73.94, 2, 34.10 },
    TreasureDeck = { -75, 2, -5.3 },
}

--- A list of snap points on the player mat, e.g. for item slots.
---@type table<gh_Save_Character_Item_Position, number>
local PlayerMatSnapPoints = {
    Head = 15,
    Armor = 16,
    HandLeft = 17,
    HandRight = 18,
    Boots = 19,
    Bag1 = 12,
    Bag2 = 13,
    Bag3 = 14,
    Active4 = 9,
    Active1 = 6,
    Active3 = 8,
    Active2 = 7,
}

--- A list of snap points on the deck mat containing different decks.
---@type table<string, number>
local DeckMatSnapPoints = {
    RandomScenarios = 8,
    Quests = 11,
}

--- A list of snap points on the city deck mat containing different decks.
local CityMatSnapPoints = {
    Shop = 1,
    RewardItems = 13,
}

--- Information about an event deck.
---@shape gh_EventDeckInfo
---@field initialDeckGuid GUID
---@field deckGuid GUID
---@field snapPoint number
---@field name string
---@field oldMat nil | GUID

---@type table<string, gh_EventDeckInfo>
Component.EventDecks = {
    ["city"] = {
        initialDeckGuid = Guid.CityEventsDeckInitial,
        deckGuid = Guid.CityEventsDeck,
        snapPoint = 2,
        name = Names.CityEvents,
    },
    ["road"] = {
        initialDeckGuid = Guid.RoadEventsDeckInitial,
        deckGuid = Guid.RoadEventsDeck,
        snapPoint = 1,
        name = Names.RoadEvents,
        oldMat = Guid.OldEventsMat,
    },
}

--------------------------------------------------------------------------------
--- Positioning ----------------------------------------------------------------
--------------------------------------------------------------------------------

local function relativeToZone(zoneGuid, position)
    return (--[[---@not nil]] getObjectFromGUID(zoneGuid)).getPosition() + position
end

local positionCounter = 0
function Component.safePosition()
    positionCounter = positionCounter + 1
    return Vector(-43 + (positionCounter * 3), 2, -85)
end

---@param player number
---@return tts__VectorShape
function Component.secondHandPosition(player)
    return relativeToZone(player, Positions.SecondHand)
end

---@param player number
---@return tts__VectorShape
function Component.questPosition(player)
    return relativeToZone(player, Positions.QuestCard)
end

--------------------------------------------------------------------------------
--- Gamebox-Content ------------------------------------------------------------
--------------------------------------------------------------------------------

---@overload fun(guid: GUID, position: tts__VectorShape)
---@param guid GUID
---@param position tts__VectorShape
---@param event nil | string
local function takeFromGamebox(guid, position, event)
    local object = getObjectFromGUID(guid)
    if object == nil then
        Component.gamebox().takeObject({
            guid = guid,
            smooth = false,
            position = position,
            rotation = { 0, 180, 0 },
            callback_function = function()
                if event then EventManager.triggerEvent(--[[---@not nil]] event) end
            end,
        })
    elseif event then
        EventManager.triggerEvent(--[[---@not nil]] event)
    end
end

---@return tts__Bag
function Component.gamebox()
    return --[[---@type tts__Bag]] getObjectFromGUID(Guid.Gamebox)
end

---@return tts__Bag
function Component.forgottenCirclesBox()
    return --[[---@type tts__Bag]] getObjectFromGUID(Guid.ForgottenCirclesBox)
end

---@return tts__Bag
function Component.lockedClasses()
    return --[[---@type tts__Bag]] getObjectFromGUID(Guid.LockedClasses)
end

---@return nil | tts__Deck
function Component.treasureDeck()
    return --[[---@type nil | tts__Deck]] getObjectFromGUID(Guid.TreasureDeck)
end

---@return nil | (tts__ObjectState, number)
function Component.treasureDeckData()
    return Search.inContainedObjects(Component.gamebox(), { guid = Guid.TreasureDeck })
end

---@return nil | tts__Object
function Component.retirementSheet()
    return getObjectFromGUID(Guid.RetirementSheet)
end

---@return nil | tts__Object
function Component.openingConditions()
    return getObjectFromGUID(Guid.OpeningConditions)
end

function Component.placeScenarioBook()
    takeFromGamebox(Guid.ScenarioBook, Positions.ScenarioBook)
end

function Component.placeRuleBook()
    takeFromGamebox(Guid.RuleBook, Positions.RuleBook)
end

function Component.placeTreasureDeck()
    takeFromGamebox(Guid.TreasureDeck, Positions.TreasureDeck, EventType.Placed.Treasure)
end

function Component.placeLockedCharacter()
    takeFromGamebox(Guid.LockedClasses, Component.safePosition(), EventType.Placed.LockedCharacters)
end

function Component.placeOpeningConditions()
    takeFromGamebox(Guid.OpeningConditions, Positions.OpeningConditions, EventType.Placed.OpeningConditions)
end

function Component.placeRetirementSheet()
    takeFromGamebox(Guid.RetirementSheet, Positions.RetirementSheet, EventType.Placed.RetirementSheet)
end

function Component.placeTownRecords()
    Component.gamebox().takeObject({
        guid = Guid.TownRecords,
        position = Positions.TownRecords,
        rotation = { 0, 180, 0 },
        smooth = false
    })
end

function Component.placeSanctuarySticker()
    Component.map().call('unseal')
    Utils.waitForObject(Guid.SanctuarySticker, function()

    end)
end

--------------------------------------------------------------------------------
--- General --------------------------------------------------------------------
--------------------------------------------------------------------------------

---@return tts__Bag
function Component.lastCharacterBox()
    return --[[---@type tts__Bag]] getObjectFromGUID(Guid.LastBox)
end

---@return tts__Bag
function Component.beforeLastCharacterBox()
    return --[[---@type tts__Bag]] getObjectFromGUID(Guid.BeforeLastBox)
end

---@return tts__Object
function Component.map()
    return --[[---@not nil]] getObjectFromGUID(Guid.Map)
end

---@return tts__Bag
function Component.achievementsBag()
    return --[[---@type tts__Bag]] getObjectFromGUID(Guid.AchievementBag)
end

---@return GUID
function Component.achievementBoardGuid()
    for _, achievementBoard in ipairs(Guids.AchievementBoard) do
        local board = getObjectFromGUID(achievementBoard)
        if board then
            return achievementBoard
        end
    end

    local achievementBag = Component.achievementsBag()
    local achievementBoard = --[[---@not nil]] Search.inContainer(achievementBag, { name = Names.AchievementBoard })
    return achievementBoard.guid
end

---@return tts__VectorShape
function Component.achievementBoardPosition()
    return { 87.26, 2, 26.12 }
end

---@return tts__Object
function Component.partySheet()
    return --[[---@not nil]] getObjectFromGUID(Guid.PartySheet)
end

---@return nil | tts__Object
function Component.sanctuarySticker()
    return getObjectFromGUID(Guid.SanctuarySticker)
end

--------------------------------------------------------------------------------
--- City-Mat -------------------------------------------------------------------
--------------------------------------------------------------------------------

---@return tts__Object
function Component.cityMat()
    return --[[---@not nil]] getObjectFromGUID(Guid.CityMat)
end

---@param snapPoint number
---@return seb_WrappedDeck
local function fromCityMat(snapPoint)
    local deckPosition = Utils.getSnapPosition(Component.cityMat(), snapPoint)
    return WrappedDeck(deckPosition)
end

---@return seb_WrappedDeck
function Component.shopDeck()
    return fromCityMat(CityMatSnapPoints.Shop)
end

---@return seb_WrappedDeck
function Component.rewardItemsDeck()
    return fromCityMat(CityMatSnapPoints.RewardItems)
end

--------------------------------------------------------------------------------
--- Deck-Mat -------------------------------------------------------------------
--------------------------------------------------------------------------------

---@return tts__Object
function Component.deckMat()
    return --[[---@not nil]] getObjectFromGUID(Guid.DeckMat)
end

---@param snapPoint number
---@return seb_WrappedDeck
local function fromDeckMat(snapPoint)
    local deckPosition = Utils.getSnapPosition(Component.deckMat(), snapPoint)
    return WrappedDeck(deckPosition)
end

---@return seb_WrappedDeck
function Component.questDeck()
    return fromDeckMat(DeckMatSnapPoints.Quests)
end

---@return seb_WrappedDeck
function Component.randomScenarioDeck()
    return fromDeckMat(DeckMatSnapPoints.RandomScenarios)
end

---@return tts__Deck
function Component.minusOneDeck()
    return --[[---@type tts__Deck]] getObjectFromGUID(Guid.PlayerMinusOneDeck)
end

--------------------------------------------------------------------------------
--- Event Mat ------------------------------------------------------------------
--------------------------------------------------------------------------------

---@return tts__Object
function Component.eventMat()
    return --[[---@not nil]] getObjectFromGUID(Guid.EventsMat)
end

---@return nil | tts__Object
function Component.eventMatOld()
    return getObjectFromGUID(Guid.OldEventsMat)
end

--------------------------------------------------------------------------------
--- Character specific ---------------------------------------------------------
--------------------------------------------------------------------------------

---@param className string
---@return nil | tts__Bag
function Component.classBox(className)
    return --[[---@type nil | tts__Bag]] getObjectFromGUID(Game.class(className).boxGuid)
end

--- Returns the contained character box within a class box for the given class.
---@param classBox tts__Bag
---@return tts__ContainerState
function Component.characterBox(classBox)
    return --[[---@type tts__ContainerState]] classBox.getData().ContainedObjects[1]
end

---@param object seb_Object
function Component.isAbilityDeck(object)
    if not Object.isDeck(object) then
        return false
    end
    local name = Object.name(object)
    return name:find(Names.AbilityDeck) or name:find(Names.StartingAbilityDeck)
end

---@return seb_WrappedDeck
function Component.abilityDeck(player)
    local abilityDeck = --[[---@type tts__Deck]] Search.inZone(Component.playerZone(player), { name = Names.AbilityDeck })
    return WrappedDeck(abilityDeck)
end

---@param object seb_Object
---@param className string
function Component.isAbilityCardForClass(object, className)
    local name = Object.name(object)

    if not Object.isCard(object)
            or not Object.description(object):find(className)
            or name:find(Names.AttachModifierCard) then
        return false
    end

    local cardName = StringUtil.replace(name, "[%(%)]%d%d[%)%(]")
    local nearest, _ = Game.nearestAbility(className, cardName)
    return nearest ~= nil
end

---@param className string
---@param abilityName string
function Component.isStartingAbility(className, abilityName)
    local ability = --[[---@not nil]] Game.ability(className, abilityName)
    return ability.level == 1 or ability.level == "X"
end

---@param class string
---@param abilityCard seb_Object
---@return string
function Component.getAbilityName(class, abilityCard)
    local cardName = StringUtil.replace(Object.name(abilityCard), "%s?[%(%)]%d+[%)%(]")
    return --[[---@not nil]] (--[[---@not nil]] Game.ability(class, cardName)).name
end

---@return tts__Bag[]
function Component.inactiveCharacters()
    return --[[---@type tts__Bag[] ]] TableUtil.filter(getObjects(), function(obj)
        return Object.isBag(obj) and obj.getDescription() == Names.InactiveCharacter
    end)
end

---@param player number
---@param positionName gh_Save_Character_Item_Position
function Component.itemPosition(player, positionName)
    if positionName then
        local snapPoint = PlayerMatSnapPoints[positionName]
        if snapPoint then
            return Utils.getSnapPosition(Component.playerMat(player), snapPoint)
        end
    end
    return relativeToZone(player, Positions.ItemUnequipped)
end

---@param playerMat tts__Object
---@param object tts__Object | tts__ObjectState
---@return gh_Save_Character_Item_Position
function Component.itemPositionName(playerMat, object)
    for name, snap in pairs(PlayerMatSnapPoints) do
        if Utils.getSnapPosition(playerMat, snap) == Object.position(object) then
            return name
        end
    end

    return "Unequipped"
end

--------------------------------------------------------------------------------
--- Player specific ------------------------------------------------------------
--------------------------------------------------------------------------------

---@return number
function Component.playerCount()
    return 4
end

---@return GUID[]
function Component.playerZones()
    return Guids.Zones
end

---@param player number
---@return tts__ScriptingTrigger
function Component.playerZone(player)
    return --[[---@type tts__ScriptingTrigger]] getObjectFromGUID(Guids.Zones[player])
end

--- Returns all objects of the given player. Only objects which center is within the planar bounds of the player zone
--- are returned. This avoids duplicated objects that overlap multiple zones.
---@param player number
---@return tts__Object[]
function Component.playerObjects(player)
    local zone = Component.playerZone(player)
    return TableUtil.filter(zone.getObjects(),
            function(object) return Utils.isCenterInZone(zone, object) end)
end

---@param player number
---@param callback fun(): void
function Component.loadPlayer(player, callback)
    local playerZoneGuid = Guids.Zones[player]
    Component.playerButton(player).call("addPlayer")
    Utils.waitForObjectInZone(playerZoneGuid, { name = Names.PlayerMat }, function()
        callback()
    end)
end

---@param player number
---@param className string
---@param callback fun(): void
function Component.placeCharacterBox(player, className, callback)
    local playerMat = Component.playerMat(player)
    local classBox = --[[---@not nil]] Component.classBox(className)

    classBox.takeObject({
        position = playerMat.getPosition(),
        smooth = false,
    })

    Utils.waitForObjectInZone(Guids.Zones[player], { name = Names.CharacterSheet },
            function() callback() end)
end

---@return GUID[]
function Component.playerButtons()
    return Guids.AddPlayers
end

---@param index number
---@return tts__Object
function Component.playerButton(index)
    return --[[---@not nil]] getObjectFromGUID(Guids.AddPlayers[index])
end

---@param player number
---@return tts__Object
function Component.playerMat(player)
    return --[[---@not nil]] Search.inZone(Component.playerZone(player), { name = Names.PlayerMat, isPattern = true })
end

---@param player number
---@return nil | tts__Object
function Component.characterMat(player)
    return Search.inZone(Component.playerZone(player), { name = Names.CharacterMat })
end

---@param player number
---@return tts__Object
function Component.characterSheet(player)
    return --[[---@not nil]] Search.inZone(Component.playerZone(player), { name = Names.CharacterSheet })
end

---@param player number
---@return tts__Deck
function Component.attackModifiers(player)
    local search = { name = Names.AttackModifierDeck, description = "Player", isPattern = true }
    return --[[---@type tts__Deck]] Search.inZone(Component.playerZone(player), search)
end

---@param player number
---@return seb_WrappedDeck
function Component.additionalAttackModifiers(player)
    for _, obj in ipairs(Component.playerZone(player).getObjects()) do
        if obj.type == Object.Type.Deck
                and obj.getName() == Names.AttackModifierDeck
                and obj.getDescription() == "" then
            return WrappedDeck(--[[---@type tts__Deck]] obj)
        end
    end
end

---@param name string
---@return string
function Component.modifierNamePattern(name)
    return "^" .. Names.AttachModifierCard .. " " .. StringUtil.escapePattern(name) .. "$"
end

--------------------------------------------------------------------------------
--- Specific cards -------------------------------------------------------------
--------------------------------------------------------------------------------

--- Returns true if the given object is an item card.
---@param object seb_Object
function Component.isItemCard(object)
    return Object.isCard(object)
            and (Component.isItemCardDescription(Object.description(object))
            or Game.Items.List[Object.name(object)] ~= nil)
end

--- Returns true if the given item card object is an item from the rewards or item design deck.
---@param item seb_Object
---@param prosperityLevel nil | number
function Component.isRewardItemCard(item, prosperityLevel)
    if not Component.isItemCard(item) then
        return false
    end

    prosperityLevel = prosperityLevel or 1
    if Object.description(item) == "" then
        local itemInfo = Game.Items.List[Object.name(item)]
        return itemInfo.reward ~= nil or itemInfo.prosperity > prosperityLevel
    else
        local description = Object.description(item)
        description = StringUtil.replace(description, "red")
        description = StringUtil.replace(description, "blue")
        return tonumber(description) > Game.Items.Prosperity[--[[---@not nil]] prosperityLevel]
    end
end

--- Returns true if the given object description is a possible item card's description.
function Component.isItemCardDescription(description)
    return description:find("^%d+$")
            or description:find("^%d+ red$")
            or description:find("^%d+ blue$")
end

---@param object seb_Object
function Component.isPersonalQuestCard(object)
    local customDeck = (--[[---@type tts__DeckCustomState]] Object.data(object)).CustomDeck
    if not Object.isCard(object) or not customDeck then
        return false
    end

    for key, _ in pairs(customDeck) do
        return TableUtil.contains(DeckIds.Quests, key)
    end
end

---@param object seb_Object
---@return nil | gh_Game_Quest_Info
function Component.getQuestInfo(object)
    local cardId = Object.data(object).CardID
    local cardIndex = tonumber(tostring(cardId):sub(-2, -1))
    for name, quest in pairs(Game.QUESTS) do
        if quest.index == cardIndex then
            return { name = name, index = quest.index, number = quest.number }
        end
    end

    return nil
end

---@param customDeck number[]
---@param index number
---@return number
local function getCardId(customDeck, index)
    local customDeckId = customDeck[#customDeck]
    return --[[---@not nil]] tonumber(string.format("%d%02d", customDeckId, index))
end

---@param index number
---@return number
function Component.getQuestCardId(index)
    return getCardId(DeckIds.Quests, index)
end

---@param index number
---@return number
function Component.getScenarioCardId(index)
    return getCardId(DeckIds.RandomScenarios, index)
end

---@param object nil | tts__Object
---@param name string
local function verifyObject(object, name)
    assert(object ~= nil, name .. " is missing ")
end

---@param container tts__Container
---@param content GUID
---@param name string
local function verifyContent(container, content, name)
    assert(getObjectFromGUID(content)
            or Search.inContainer(container, { guid = content }),
            name .. " is missing")
end

---@param object tts__Object
---@param tableName string
---@param name string
local function verifyTable(object, tableName, name)
    assert(object.getTable(tableName), name .. " is missing")
end

--- Verifies that the script can actually run, by checking if needed objects exists.
function Component.verifyLoad()
    local gamebox = Component.gamebox()
    verifyObject(gamebox, "Gamebox")
    verifyContent(gamebox, Guid.LockedClasses, "Locked classes")
    verifyContent(gamebox, Guid.ScenarioBook, "Scenario book")
    verifyContent(gamebox, Guid.RuleBook, "Rule book")
    verifyContent(gamebox, Guid.OpeningConditions, "Opening Conditions")
    verifyContent(gamebox, Guid.RetirementSheet, "Retirement Sheet")
    verifyContent(gamebox, Guid.TownRecords, "Town Records")

    local map = Component.map()
    verifyObject(map, "Map")
    verifyTable(map, "tableML", "Scenario information")
    verifyTable(map, "Pros", "Prosperity information")

    verifyObject(Component.achievementsBag(), "Achievements bag")
    verifyObject(Component.deckMat(), "Deck Mat")
    verifyObject(Component.minusOneDeck(), "-1 Deck")
    verifyObject(Component.cityMat(), "City Mat")
    verifyObject(Component.eventMat(), "Events Mat")
    verifyObject(Component.partySheet(), "Party Sheet")
    for i, zone in pairs(Guids.Zones) do
        verifyObject(getObjectFromGUID(zone), "Player zone " .. i)
    end
    for i, button in pairs(Component.playerButtons()) do
        verifyObject(getObjectFromGUID(button), "Add Player button " .. i)
    end
end

return Component

local EventManager = require('ge_tts.EventManager')
local Logger = require('sebaestschjin-tts.Logger')
local Object = require('sebaestschjin-tts.Object')
local Search = require('sebaestschjin-tts.Search')
local Utils = require('sebaestschjin-tts.Utils')
local WrappedDeck = require('sebaestschjin-tts.WrappedDeck')

local Component = require('gloomhaven-campaign-manager.Component')
local EventType = require('gloomhaven-campaign-manager.EventType')
local Prosperity = require('gloomhaven-campaign-manager.Prosperity')

local Shop = {}

function Shop.setup()
    EventManager.addHandler(EventType.Loaded.Prosperity, function() Shop.load() end)
end

function Shop.load()
    local cityMat = Component.cityMat()

    for i = 1, Prosperity.getLevel() do
        cityMat.call("layOut", i)
    end
    cityMat.call("layOut", 0)

    EventManager.triggerEvent(EventType.Loaded.Shop)
end

---@param unlocked gh_Save_Unlocked
function Shop.save(unlocked)
    local shopDeck = Component.shopDeck()
    if shopDeck.isEmpty() then
        Component.cityMat().call("layOut", 0)
        Wait.time(function() Shop.doSave(unlocked) end, 1)
    else
        Shop.doSave(unlocked)
    end
end

---@param unlocked gh_Save_Unlocked
function Shop.doSave(unlocked)
    local shopDeck = Component.shopDeck()
    if shopDeck.isEmpty() then
        Logger.warn("Can't find shop deck, even after trying to recalling it."
                .. " This means unlocked items can't be saved.")
        return
    end

    local items = unlocked.items
    Shop.saveFromObjects(shopDeck.getObjects(), items)
    for player = 1, Component.playerCount() do
        Shop.saveFromObjects(Component.playerObjects(player), items)
    end

    table.sort(items)
end

---@param objects seb_Object_Array
---@param items string[]
function Shop.saveFromObjects(objects, items)
    for _, item in pairs(--[[---@type tts__Object[] ]] objects) do
        if Component.isRewardItemCard(item, Prosperity.getLevel()) then
            table.insert(items, Object.name(item))
        end
    end
end

---@overload fun(name: string, toPosition: tts__VectorShape, toRotation: tts__VectorShape): boolean
---@overload fun(name: string, toPosition: tts__VectorShape): boolean
---@param name string
---@param toPosition tts__VectorShape
---@param toRotation tts__VectorShape
---@param startAt number
---@return boolean
function Shop.takeItem(name, toPosition, toRotation, startAt)
    startAt = startAt or 1
    local cityMat = Component.cityMat()

    for i = startAt, 14 do
        local deckPosition = Utils.getSnapPosition(cityMat, i)
        local deck = WrappedDeck(deckPosition)
        if not deck.isEmpty() then
            local item, index = Search.inContainedObjects(deck, { name = name })
            if item then
                deck.takeObject({
                    index = index,
                    smooth = false,
                    position = toPosition,
                    rotation = toRotation,
                })
                return true
            end
        end
    end

    return false
end

---@overload fun(name: string, toPosition: tts__VectorShape): boolean
---@param name string
---@param toPosition tts__VectorShape
---@param toRotation tts__VectorShape
---@return boolean
function Shop.takeRewardItem(name, toPosition, toRotation)
    return Shop.takeItem(name, toPosition, toRotation, 2)
end

return Shop

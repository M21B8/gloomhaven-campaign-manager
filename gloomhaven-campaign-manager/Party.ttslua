local StringUtil = require("sebaestschjin-tts.StringUtil")
local TableUtil = require("sebaestschjin-tts.TableUtil")

local Character = require("gloomhaven-campaign-manager.Character")
local Component = require("gloomhaven-campaign-manager.Component")

local Party = {}

---@param party gh_Save_Party
function Party.load(party)
    local partySheet = Component.partySheet()

    partySheet.setName(party.name)
    partySheet.UI.setAttribute("partyName", "text", party.name)
    partySheet.UI.setAttribute("location", "text", party.location)
    partySheet.UI.setAttribute("notes", "text", table.concat(party.notes, "\n"))
    partySheet.UI.setAttribute("partyAchiev", "text", table.concat(party.achievements, "\n"))
    partySheet.call("addSub", { "partyReputation", party.reputation })

    for i, character in ipairs(party.characters) do
        if TableUtil.isNotEmpty(character) then
            Party.setPartySheetCharacter(i, character)
        end
    end
    Party.setPartySheetAverageLevel(party.characters)
end

---@param content gh_Savefile
---@param characterClass string
function Party.mayLoadCharacter(content, characterClass)
    for i, character in ipairs(content.party.characters) do
        if character.class == characterClass then
            Character.load(i, character)
        end
    end
end

---@param position number
---@param character gh_Save_Character
function Party.setPartySheetCharacter(position, character)
    local partySheet = Component.partySheet()
    local partySheetAttributeNames = --[[---@type string[] ]] { "playerone", "playertwo", "playerthree", "playerfour" }
    local attributeName = partySheetAttributeNames[position]
    local attributeLvlName = attributeName .. 'lvl'
    local level = Character.getLevel(character.xp)

    partySheet.UI.setAttribute(attributeName, "text", character.name)
    partySheet.UI.setAttribute(attributeLvlName, "text", level)
end

---@param characters gh_Save_Character[]
function Party.setPartySheetAverageLevel(characters)
    local partySheet = Component.partySheet()
    local sum, numPlayers = 0, 0
    for _, character in ipairs(characters) do
        if TableUtil.isNotEmpty(character) then
            sum = sum + Character.getLevel(character.xp)
            numPlayers = numPlayers + 1
        end
    end
    local average = sum / numPlayers
    local scenarioLevel = math.ceil(average / 2)
    partySheet.UI.setAttribute("averageLevel", "text", --[[---@not nil]] tonumber(string.format("%.2f", average)))
    partySheet.UI.setAttribute("scenarioLevel", "text", --[[---@not nil]] tonumber(string.format("%d", scenarioLevel)))
end

---@param saveFile gh_Savefile
function Party.saveAll(saveFile)
    local party = saveFile.party

    local partySheet = Component.partySheet()
    party.name = partySheet.UI.getAttribute("partyName", "text")
    party.location = partySheet.UI.getAttribute("location", "text")
    party.notes = StringUtil.split(partySheet.UI.getAttribute("notes", "text"), { "\n" })
    party.achievements = StringUtil.split(partySheet.UI.getAttribute("partyAchiev", "text"), { ",", "\n" })
    party.reputation = --[[---@not nil]] tonumber(partySheet.UI.getAttribute("partyReputation", "text"))

    party.characters = --[[---@type gh_Save_Character[] ]]{}
    for _, zoneGuid in pairs(Component.playerZones()) do
        Character.save(zoneGuid, party.characters)
    end
end

return Party

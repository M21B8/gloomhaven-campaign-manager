local EventManager = require("ge_tts.EventManager")
local Logger = require("sebaestschjin-tts.Logger")
local Object = require("sebaestschjin-tts.Object")
local ObjectState = require("sebaestschjin-tts.ObjectState")
local StringUtil = require("sebaestschjin-tts.StringUtil")
local TableUtil = require("sebaestschjin-tts.TableUtil")

local Component = require("gloomhaven-campaign-manager.Component")
local Character = require("gloomhaven-campaign-manager.Character")
local EventType = require("gloomhaven-campaign-manager.EventType")
local Game = require("gloomhaven-campaign-manager.Game")

local Enhancement = {}

---@type table<string, URL>
local Decals = {
    ["Air"] = "http://cloud-3.steamusercontent.com/ugc/938309024726768884/CC8308C7D7DD6185F3EFA99F452C83101E1E95E3/",
    ["Earth"] = "http://cloud-3.steamusercontent.com/ugc/938309024726773039/E83D1E9F06938B3B5355F0A6A49D98B78B1F2594/",
    ["Fire"] = "http://cloud-3.steamusercontent.com/ugc/938309024726770166/CD369CF7C22FAD932A71C65BA811AE137234270D/",
    ["Frost"] = "http://cloud-3.steamusercontent.com/ugc/938309024726771564/3C69B7D1E66E8FC022B2BD77CC427E8AEC5D9331/",
    ["Dark"] = "http://cloud-3.steamusercontent.com/ugc/938309024726982499/9C14793623433565A9D6E5B3C608C1F6FBB84C76/",
    ["Light"] = "http://cloud-3.steamusercontent.com/ugc/938309024726774294/5BBAC718ED55E90563D2B24848DE3ACAEBD76FE9/",
    ["Any Element"] = "http://cloud-3.steamusercontent.com/ugc/938309024726984504/2F962A64E2A9888C90856D9C150EF81089745137/",
    ["Curse"] = "http://cloud-3.steamusercontent.com/ugc/938309024726987796/ABB2E197E22015077D39A378AA9A9E7A317C69FE/",
    ["Bless"] = "http://cloud-3.steamusercontent.com/ugc/938309024726986639/FDF514FDA20826ACA054BE5CBA579AE6FB25A263/",
    ["Disarm"] = "http://cloud-3.steamusercontent.com/ugc/938309024726989091/DB993A58BC37C60B64A2F2CCDAED888F6176BC43/",
    ["Immobilize"] = "http://cloud-3.steamusercontent.com/ugc/938309024726990928/14B27BE1DC8F226D05FDB7D7D5D420FFCA6919B0/",
    ["Muddle"] = "http://cloud-3.steamusercontent.com/ugc/938309024726993395/820BE84906894B87F0C0DAC77C3BFBCD9B1AD504/",
    ["Poison"] = "http://cloud-3.steamusercontent.com/ugc/938309024726994202/6EAECD4A8A6A56F42834D486A21219002B883C53/",
    ["Regenerate"] = "http://cloud-3.steamusercontent.com/ugc/791986676667649885/92F7F934D298524F6F72997095DDBA073D9A15BF/",
    ["Strengthen"] = "http://cloud-3.steamusercontent.com/ugc/938309024726995467/72FC8E8918F788646DBD0C571FDAB214D7A36445/",
    ["Stun"] = "http://cloud-3.steamusercontent.com/ugc/83721958671678940/616CC0951CB17024448D3CBC7E5CA9D3A05D7555/",
    ["Wound"] = "http://cloud-3.steamusercontent.com/ugc/938309024726992099/9B90EEDC5B68B4FFD04C0037008F9C96BA603C24/",
    ["Plus 1"] = "http://cloud-3.steamusercontent.com/ugc/938309024726761532/C3BB327E15466B74ED256A0BD7B66C20A8825861/",
    ["Area"] = "http://cloud-3.steamusercontent.com/ugc/938309024726997997/041C0C738331AA8B4D8281BE8E9BE2C2963D823D/",
    ["Jump"] = "http://cloud-3.steamusercontent.com/ugc/938309024726767406/7C34D7EA30D5E6FF90BBA88A767ACB98467FC557/"
}
Decals["Ice"] = Decals["Frost"] -- makes more sense, since the element is also called Ice

---@type number
local MaxDistance = 0.1
---@type number
local DecalYCoordinate = 0.36
---@type tts__VectorShape
local DecalRotation = { 90, 180, 0 }
---@type tts__VectorShape
local DecalScale = { 0.16, 0.16, 3.07 }

---@param saveFile gh_Savefile
---@param className string
function Enhancement.mayLoadForClass(saveFile, className)
    for _, classEnhancements in ipairs(saveFile.enhancements) do
        if classEnhancements.class == className then
            Enhancement.loadClass(className, classEnhancements.abilities)
            return
        end
    end
    Enhancement.finishLoadClass(className)
end

---@param className string
---@param abilities gh_Save_Enhanced_Ability[]
function Enhancement.loadClass(className, abilities)
    Logger.info("Loading enhancements for class %s", className)

    local classBox = --[[---@not nil]] Component.classBox(className)
    local classBoxData = classBox.getData()
    local characterBox = Component.characterBox(classBox)

    for _, contained in pairs(characterBox.ContainedObjects) do
        if Component.isAbilityDeck(contained) then
            Enhancement.applyEnhancementsOnAbilityDeck(--[[---@type tts__DeckState]]contained, className, abilities)
        end
    end

    classBox.destruct()
    spawnObjectData({
        data = classBoxData,
        callback_function = function()
            Logger.info("Enhancements for class %s loaded", className)
            Enhancement.finishLoadClass(className)
        end,
    })
end

---@param className string
function Enhancement.finishLoadClass(className)
    EventManager.triggerEvent(EventType.Load.Class.Enhanced, className)
end

---@param deck tts__DeckState
---@param className string
---@param abilities gh_Save_Enhanced_Ability[]
function Enhancement.applyEnhancementsOnAbilityDeck(deck, className, abilities)
    for _, ability in pairs(abilities) do
        for _, abilityCard in pairs(deck.ContainedObjects) do
            if Object.name(abilityCard):find(ability.name) then
                Enhancement.applyEnhancementsOnCard(abilityCard, className, ability)
            end
        end
    end
end

---@param abilityCard tts__ObjectState
---@param className string
---@param ability gh_Save_Enhanced_Ability
function Enhancement.applyEnhancementsOnCard(abilityCard, className, ability)
    local enhancementsInfo = (--[[---@not nil]] Game.ability(className, ability.name)).enhancements
    for _, enhancement in pairs(ability.enhancements) do
        local position = enhancementsInfo[enhancement.position]
        ObjectState.addDecal(abilityCard, {
            name = "Enhancement " .. enhancement.enhancement,
            url = Decals[enhancement.enhancement],
            position = { position[1], DecalYCoordinate, position[2] },
            rotation = DecalRotation,
            scale = DecalScale,
        })
    end
end

---@param saveFile gh_Savefile
function Enhancement.saveAll(saveFile)
    local enhancements = saveFile.enhancements

    for _, playerZone in pairs(Component.playerZones()) do
        Enhancement.saveFromZone(playerZone, enhancements)
    end
    Enhancement.saveFromPackedCharacters(enhancements)
    Enhancement.saveFromCharacterBoxes(enhancements)

    enhancements = TableUtil.sortByAttribute(enhancements, "class")
end

---@param playerZone GUID
---@param enhancements gh_Save_EnhancedClass[]
function Enhancement.saveFromZone(playerZone, enhancements)
    local className = Character.findClassInZone(playerZone)
    if not className then
        return
    end

    Enhancement.saveFromContainer(Component.playerZone(playerZone), --[[---@not nil]] className, enhancements)
end

---@param enhancements gh_Save_EnhancedClass[]
function Enhancement.saveFromPackedCharacters(enhancements)
    for _, inactiveCharacter in pairs(Component.inactiveCharacters()) do
        local className = inactiveCharacter.getName()
        Enhancement.saveFromContainer(inactiveCharacter.getData(), className, enhancements)
    end
end

---@param enhancements gh_Save_EnhancedClass[]
function Enhancement.saveFromCharacterBoxes(enhancements)
    for className, _ in pairs(Game.CLASSES) do
        local classBox = Component.classBox(className)
        if classBox then
            local characterBox = Component.characterBox(--[[---@not nil]] classBox)
            Enhancement.saveFromContainer(characterBox, className, enhancements)
        end
    end
end

---@param container seb_Object_Container
---@param className string
---@param enhancements gh_Save_EnhancedClass[]
function Enhancement.saveFromContainer(container, className, enhancements)
    for _, object in ipairs(Object.objects(container)) do
        if Component.isAbilityCardForClass(object, className) and TableUtil.isNotEmpty(Object.decals(object)) then
            Enhancement.saveForCard(object, className, enhancements)
        elseif Object.isContainer(object) then
            Enhancement.saveFromContainer(--[[---@type seb_Object_Container]] object, className, enhancements)
        end
    end
end

---@param card seb_Object
---@param className string
---@param enhancements gh_Save_EnhancedClass[]
function Enhancement.saveForCard(card, className, enhancements)
    Logger.verbose("Saving enhancements for " .. Object.name(card))
    local abilityName = Component.getAbilityName(className, card)
    local enhancementInfo = (--[[---@not nil]] Game.ability(className, abilityName)).enhancements

    for _, decal in ipairs(Object.decals(card)) do
        local enhancementName = StringUtil.replace(decal.name, "Enhancement ")
        local nearestIndex, distance = Enhancement.findNearestIndex(decal.position, enhancementInfo)

        if Enhancement.saveEnhancement(enhancements, className, abilityName, nearestIndex, enhancementName) then
            if distance > MaxDistance then
                Logger.warn("Enhancement for ability " .. className .. "\n"
                        .. "The distance to any known enhancement position for this ability is bigger"
                        .. " than expected (" .. distance .. "). This might mean, that the known"
                        .. " information is outdated (e.g. a newer printing of the card exists),"
                        .. " the card shouldn't have enhancements or that the decal was added"
                        .. " rather sloppy. Please verify that the enhancement loads correctly.")
            end
        end
    end
end

---@param enhancements gh_Save_EnhancedClass[]
---@param className string
---@param abilityName string
---@param position number
---@param enhancementName string
---@return boolean
function Enhancement.saveEnhancement(enhancements, className, abilityName, position, enhancementName)
    ---@type gh_Save_EnhancedClass
    local classEnhancements
    for _, enhancedClass in pairs(enhancements) do
        if enhancedClass.class == className then
            classEnhancements = enhancedClass
            break
        end
    end
    if not classEnhancements then
        classEnhancements = { class = className, abilities = {} }
        table.insert(enhancements, classEnhancements)
    end

    ---@type gh_Save_Enhanced_Ability
    local abilityEnhancement
    for _, enhancedAbility in pairs(classEnhancements.abilities) do
        if enhancedAbility.name == abilityName then
            abilityEnhancement = enhancedAbility
            break
        end
    end
    if not abilityEnhancement then
        abilityEnhancement = { name = abilityName, enhancements = {} }
        table.insert(classEnhancements.abilities, abilityEnhancement)
    end

    for _, enhancedPosition in pairs(abilityEnhancement.enhancements) do
        if enhancedPosition.position == position then
            return false
        end
    end
    local positionEnhancement = { position = position, enhancement = enhancementName }
    table.insert(abilityEnhancement.enhancements, positionEnhancement)

    return true
end

---@param decalPosition tts__Vector
---@param enhancementInfo gh_Game_Ability_Enhancement[]
---@return (number, number)
function Enhancement.findNearestIndex(decalPosition, enhancementInfo)
    local nearestDistance = 42
    local nearestIndex = 1
    decalPosition:setAt("y", 0)
    for i, enhancement in ipairs(enhancementInfo) do
        local x, z = enhancement[1], enhancement[2]
        local distance = decalPosition:distance(Vector(x, 0, z))
        if distance < nearestDistance then
            nearestDistance = distance
            nearestIndex = i
        end
    end

    return nearestIndex, nearestDistance
end

return Enhancement

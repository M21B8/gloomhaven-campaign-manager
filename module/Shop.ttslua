local DeckUtil = require("sebaestschjin-tts.src.DeckUtil")
local Logger = require("sebaestschjin-tts.module.Logger")
local ObjectUtil = require("sebaestschjin-tts.src.ObjectUtil")
local TableUtil = require("sebaestschjin-tts.src.TableUtil")
local Utils = require("sebaestschjin-tts.src.Utils")

local Component = require("gloomhaven-campaign-manager.module.Component")
local Prosperity = require("gloomhaven-campaign-manager.module.Prosperity")

local Shop = {}

function Shop.load()
    local cityMat = Component.cityMat()

    for i = 1, Prosperity.getLevel() do
        cityMat.call("layOut", i)
    end
    cityMat.call("layOut", 0)
end

function Shop.save(unlocked)
    local shopDeck = Component.fromCityMat(Component.snaps.SHOP)
    if shopDeck.isEmpty then
        Component.cityMat().call("layOut", 0)
        Wait.time(function() Shop.doSave(unlocked) end, 1)
    else
        Shop.doSave(unlocked)
    end
end

function Shop.doSave(unlocked)
    local shopDeck = Component.fromCityMat(Component.snaps.SHOP)
    if shopDeck.isEmpty then
        Logger.warn("Can't find shop deck, even after trying to recalling it."
                .. " This means unlocked items can't be saved.")
        return
    end

    local items = {}
    Shop.saveFromObjects(ObjectUtil.getContainedObjects(shopDeck), items)
    for _, zoneGuid in pairs(Component.guids.ZONES) do
        Shop.saveFromObjects(Component.getObjectsInZone(zoneGuid), items)
    end

    unlocked.items = TableUtil.emptyToNil(table.sort(items))
end

---@param objects common__WrappedDeck | tts__Object[]
---@param items string[]
function Shop.saveFromObjects(objects, items)
    for _, item in pairs(objects) do
        if Component.isRewardItemCard(item, Prosperity.getLevel()) then
            table.insert(items, item.getName())
        end
    end
end

function Shop.findItem(name)
    local cityMat = --[[---@not nil]] getObjectFromGUID(Component.guids.CITY_MAT)
    for i = 1, 14 do
        local pos = Utils.getSnapPosition(cityMat, i)
        local deck = cityMat.call('checkForDeck', pos)
        if deck then
            local item = Utils.findObjectIn(deck, { name = name, plain = true })
            if item then
                return item
            end
        end
    end

    return nil
end

function Shop.takeItem(name, toPosition, toRotation, startAt)
    startAt = startAt or 1
    local cityMat = --[[---@not nil]] getObjectFromGUID(Component.guids.CITY_MAT)

    for i = startAt, 14 do
        local deckPosition = Utils.getSnapPosition(cityMat, i)
        local deck = DeckUtil.wrapAt(deckPosition)
        if deck then
            local item = Utils.findObjectIn(deck, { name = name, plain = true })
            if item then
                deck.takeObject({
                    index = item.index,
                    smooth = false,
                    position = toPosition,
                    rotation = toRotation,
                })
                return true
            end
        end
    end

    return false
end

function Shop.takeRewardItem(name, toPosition, toRotation)
    return Shop.takeItem(name, toPosition, toRotation, 2)
end

return Shop

Shop = {}


function Shop.load()
  local cityMat = getObjectFromGUID(guids.CITY_MAT)

  for i=1, Prosperity.getLevel() do
    cityMat.call("layOut", i)
  end
  cityMat.call("layOut", 0)
end


function Shop.save()
  -- TODO this also has to take character items into account
  local cityMat = getObjectFromGUID(guids.CITY_MAT)
  local shopPosition = Utils.getSnapPosition(cityMat, snaps.SHOP)
  local shopDeck = cityMat.call('checkForDeck', shopPosition)
  -- TODO recall the shop if it is currently layed out
  local items = {}

  for _, item in pairs(shopDeck.getObjects()) do
    if Component.isRewardItemCard(item) then
      items[item.name] = true
    end
  end

  return TableUtil.setToList(items)
end


function Shop.getItem(name, position)
  local cityMat = getObjectFromGUID(guids.CITY_MAT)
  for i=1, 14 do
    local pos = Utils.getSnapPosition(cityMat, i)
    local deck = cityMat.call('checkForDeck', pos)
    if deck then
      local item = Utils.findObjectInfoInStack(deck, {name=name, plain=true})
      if item then
        deck.takeObject({
          guid = item.guid,
          smooth = false,
          rotation = Rotation.NORTH,
          callback_function = function(card) card.setPosition(position) end,
          flip = true
        })
        return
      end
    end
  end
end


function Shop.getRewardItem(name, position)
  local decks = {getObjectFromGUID(guids.RANDOM_RED_DECK),
                 getObjectFromGUID(guids.RANDOM_BLUE_DECK),
                 getObjectFromGUID(guids.REWARDS_DECK)}

  for _, deck in pairs(decks) do
    local item = Utils.findObjectInfoInStack(deck, {name=name})
    if item then
      deck.takeObject({
        guid = item.guid,
        position = position,
        smooth = false
      })
    end
  end
end

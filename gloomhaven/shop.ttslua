Shop = {}


function Shop.load()
  local cityMat = getObjectFromGUID(guids.CITY_MAT)

  for i=1, Prosperity.getLevel() do
    cityMat.call("layOut", i)
  end
  cityMat.call("layOut", 0)
end


function Shop.save()
  local cityMat = getObjectFromGUID(guids.CITY_MAT)
  local shopPosition = Utils.getSnapPosition(cityMat, snaps.SHOP)
  local shopDeck = cityMat.call('checkForDeck', shopPosition)
  if not shopDeck then
    Log.warning("Can't find shop deck, which means unlocked items can't be saved."
                .." If the shop is currently layed out, please recall it and try again.")
    return {}
  end

  local items = {}
  for _, item in pairs(shopDeck.getObjects()) do
    if Component.isRewardItemCard(item) then
      items[item.name] = true
    end
  end

  return table.sort(TableUtil.setToList(items))
end


function Shop.findItem(name)
  local cityMat = getObjectFromGUID(guids.CITY_MAT)
  for i=1, 14 do
    local pos = Utils.getSnapPosition(cityMat, i)
    local deck = cityMat.call('checkForDeck', pos)
    if deck then
      local item = Utils.findObjectIn(deck, {name=name, plain=true})
      if item then
        return item
      end
    end
  end
end


function Shop.takeItem(name, toPosition, toRotation, startAt)
  startAt = startAt or 1
  local cityMat = getObjectFromGUID(guids.CITY_MAT)

  for i=startAt, 14 do
    local pos = Utils.getSnapPosition(cityMat, i)
    local deck = cityMat.call('checkForDeck', pos)
    if deck then
      local item = Utils.findObjectIn(deck, {name=name, plain=true})
      if item then
        deck.takeObject({
          index = item.index,
          smooth = false,
          position = toPosition,
          rotation = toRotation,
        })
        return true
      end
    end
  end

  return false
end


function Shop.takeRewardItem(name, toPosition, toRotation)
  return Shop.takeItem(name, toPosition, toRotation, 2)
end

saveHandler = {}

#include !/common/utils
#include !/common/tableUtil
#include !/common/constants

#include component
#include game

#include preparation
#include prosperity
#include scenario
#include achievement
#include unlocked
#include party
#include character
#include shop
#include retirement
#include quest
#include event
#include sanctuary
#include enhancement

saveHandler.SAVE_FILE = "Savefile"

function saveHandler.read()
  local save_file = utils.read_notebook(saveHandler.SAVE_FILE)

  if not save_file then
    print("No notebook found containing the save file! Please add a notebook named " .. saveHandler.SAVE_FILE)
    return
  end

  local content = JSON.decode(save_file)

  preparation.start(function() saveHandler.start_reading(content) end)
end


function saveHandler.save()
  local saveFile = saveHandler.createSaveFile()

  Wait.time(function()
              local content = JSON.encode_pretty(saveFile)
              Notes.addNotebookTab({ title = "New Savefile", body = content })
            end, 3)
end


function saveHandler.start_reading(content)
  saveHandler.read_global(content.global)
  saveHandler.read_unlocked(content.unlocked)
  saveHandler.read_party(content.party)
  saveHandler.read_retirements(content.retired)
  saveHandler.read_shop()
  saveHandler.read_events(content)
  Wait.time(function() Enhancement.loadAll(content) end, 7) -- TODO just a workaround until Task module is done
end


function saveHandler.read_global(content)
  if not content then return end

  if content.scenarios then
    Scenario.loadAll(content.scenarios)
  end
  if content.achievements then
    Achievement.loadAll(content.achievements)
  end
  if content.prosperity then
    Prosperity.load(content.prosperity)
  end
  if content.sanctuary then
    Sanctuary.load(content.sanctuary)
  end
end


function saveHandler.read_unlocked(content)
  if not content then return end

  Unlocked.read_all(content)
end


function saveHandler.read_party(content)
  if not content then return end

  Party.load(content)
end


function saveHandler.read_retirements(retired)
  if retired then
    Retirement.load(retired)
  end
end


function saveHandler.read_shop()
  Shop.load()
end


function saveHandler.read_events(content)
  if not content.events then return end
  Event.loadAll(content.events)
end


function saveHandler.createSaveFile()
  local saveFile = {}

  saveHandler.saveGlobal(saveFile)
  saveHandler.saveUnlocked(saveFile)
  saveHandler.saveParty(saveFile)
  saveHandler.saveRetirements(saveFile)
  saveHandler.saveEvents(saveFile)

  return saveFile
end


function saveHandler.saveGlobal(saveFile)
  saveFile.global = {
    prosperity = Prosperity.save(),
    sanctuary = Sanctuary.save(),
    scenarios = Scenario.save()
  }
  Achievement.saveAll(saveFile.global)
end


function saveHandler.saveUnlocked(saveFile)
  saveFile.unlocked = {
    classes = Unlocked.saveClasses(),
    items = Shop.save(),
    special_conditions = Unlocked.saveOpeningConditions()
  }
end


function saveHandler.saveParty(saveFile)
  saveFile.party = Party.save()
end


function saveHandler.saveRetirements(saveFile)
  saveFile.retired = Retirement.save()
end


function saveHandler.saveEvents(saveFile)
  saveFile.events = Event.save()
end

local DeckUtil = require("common/DeckUtil")

Event = {}

Event.DECKS = {
  ["city"] = {
    initialDeckGuid = guids.CITY_EVENTS_DECK_INITIAL,
    deckGuid = guids.CITY_EVENTS_DECK,
    snapPoint = snaps.CITY_EVENTS_DECK,
    oldMat = "b53fb2",
  },
  ["road"] = {
    initialDeckGuid = guids.ROAD_EVENTS_DECK_INITIAL,
    deckGuid = guids.ROAD_EVENTS_DECK,
    snapPoint = snaps.ROAD_EVENTS_DECK,
    oldMat = "41393b",
  },
}

function Event.loadAll(events)
  Task.load("Events", events, Event.validate, Event.doLoad)
end

function Event.validate(events)
  for i, eventDeck in pairs(events) do
    if not Event.DECKS[eventDeck.deck] then
      Error.add("An event deck named '%s' does not exist.", eventDeck.deck)
      events[i] = nil
    else
      Event.validateEventNumbers(eventDeck.deck, eventDeck.add)
      Event.validateEventNumbers(eventDeck.deck, eventDeck.remove)
      Event.validateEventNumbers(eventDeck.deck, eventDeck.bottomUp)
    end
  end

  return true, Error.pop()
end


function Event.validateEventNumbers(deckName, events)
  if not events then
    return
  end

  for i, event in pairs(events) do
    if event > 30 then
      local deck = getObjectFromGUID(Event.DECKS[deckName].deckGuid)
      local eventCard = Utils.findObjectIn(deck, {name=string.format("%02d", event)})
      if not eventCard then
        Error.add("An event with number '%s' does not exist for deck '%s'.",
                  event, deckName)
        events[i] = nil
      end
    end
  end
end



function Event.doLoad(events)
  for _, eventDeck in pairs(events) do
    Event.load(eventDeck)
  end
end


function Event.load(events)
  local eventsInfo = Event.DECKS[events.deck]
  local deck = DeckUtil.wrap(getObjectFromGUID(eventsInfo.deckGuid))
  deck.putObject(getObjectFromGUID(eventsInfo.initialDeckGuid))

  local bottomCards = Event.findBottomDeck(events, deck)
  local addedCards = Event.findAddedCards(events, deck, bottomCards)

  TableUtil.shuffle(addedCards)
  local eventCards = TableUtil.append(bottomCards, addedCards)

  Event.dealEvents(deck, eventCards, eventsInfo)
end


function Event.findBottomDeck(events, deck)
  if not events.bottomUp then return {} end

  local eventsToAdd = {}
  for i, event in pairs(events.bottomUp) do
    local eventName = string.format("%02d", event)
    local eventCard = Utils.findObjectIn(deck, {name=eventName})
    table.insert(eventsToAdd, eventCard.getGUID())
  end

  return eventsToAdd
end


function Event.findAddedCards(events, deck, alreadyAdded)
  local eventsToAdd = {}
  for _, eventCard in pairs(deck.getObjects()) do
    local eventNumber = tonumber(eventCard.name)
    if not TableUtil.contains(alreadyAdded, eventCard.guid)
       and Event.isAdded(events, eventNumber)
       and not Event.isRemoved(events, eventNumber)
    then
      table.insert(eventsToAdd, eventCard.guid)
    end
  end

  return eventsToAdd
end


function Event.isRemoved(events, eventNumber)
  return events.remove and TableUtil.contains(events.remove, eventNumber)
end


function Event.isAdded(events, eventNumber)
  return eventNumber <= 30
         or (events.add and TableUtil.contains(events.add, eventNumber))
end


function Event.dealEvents(deck, eventCards, info)
  local eventPosition = Event.getPosition(info)
  for i, event in pairs(eventCards) do
    local offset = i * 0.1
    deck.takeObject({
      guid = event,
      position = eventPosition + vector(0, offset, 0),
      rotation = Rotation.NORTH,
      smooth = false
    })
  end
end


function Event.save()
  events = {}

  for name, info in pairs(Event.DECKS) do
    local eventDeck = Event.saveEventsFromDeck(info)
    if eventDeck then
      eventDeck.deck = name
      table.insert(events, eventDeck)
    end
  end

  return TableUtil.emptyToNil(events)
end


function Event.saveEventsFromDeck(info)
  local hitObjects = Physics.cast({
    origin = Event.getPosition(info) + vector(0, -0.05, 0),
    direction = Direction.UP,
    max_distance = 0.1
  })

  local eventsFromDeck = {}
  eventsFromDeck.bottomUp = {}
  for _, object in pairs(hitObjects) do
    object = object.hit_object
    if object.tag == "Deck" then
      local eventNumbers = {}
      for _, card in pairs(object.getObjects()) do
        table.insert(eventsFromDeck.bottomUp, tonumber(card.name))
      end
    end
  end

  if TableUtil.isEmpty(eventsFromDeck.bottomUp) then
    return nil
  end
  return eventsFromDeck
end


function Event.getPosition(info)
  if getObjectFromGUID(info.oldMat) then
    return Utils.getSnapPosition(getObjectFromGUID(info.oldMat), 1)
  end

  return Utils.getSnapPosition(getObjectFromGUID(guids.EVENTS_MAT), info.snapPoint)
end

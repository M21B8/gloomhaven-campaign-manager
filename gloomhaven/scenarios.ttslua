scenarios = {}

scenarios.OPEN = "Open"
scenarios.DONE = "Done"
scenarios.LOCKED = "Locked"

function scenarios.load(content)
  local scenarioStickers = getObjectFromGUID(guids.MAP).getTable("tableML")

  for number, state in pairs(content) do
    local stickerGuid = scenarios.findStickerGuid(scenarioStickers, tonumber(number))
    Wait.time(function() scenarios.placeSticker(stickerGuid, state) end, 1.1, 1)
  end
end


function scenarios.save()
  local content = {}
  local map = getObjectFromGUID(guids.MAP)
  local scenarioStickers = map.getTable("tableML")
  local unlockedScenarios = map.getTable("locations")

  for stickerGuid, info in pairs(scenarioStickers) do
    if getObjectFromGUID(stickerGuid) ~= nil and info.number ~= nil then
      state = scenarios.OPEN
      if unlockedScenarios[stickerGuid] then
        if unlockedScenarios[stickerGuid][1] == 1 then
          state = scenarios.LOCKED
        else
          state = scenarios.DONE
        end
      end
      content[tostring(info.number)] = state
    end
  end

  return content
end


function scenarios.findStickerGuid(scenarioStickers, number)
  for stickerGuid, info in pairs(scenarioStickers) do
    if info.number == number then
      return stickerGuid
    end
  end
  return nil
end


function scenarios.placeSticker(stickerGuid, state)
  local map = getObjectFromGUID(guids.MAP)
  if state == scenarios.OPEN then
    map.call("clickedML", stickerGuid)
  elseif state == scenarios.DONE then
    map.call("clickedML", stickerGuid)
    map.call("oneClick", { stickerGuid })
  elseif state == scenarios.LOCKED then
    map.call("clickedML", stickerGuid)
    map.call("triClick", { stickerGuid })
  else
    print("Unknown state: " .. tostring(state))
  end
end

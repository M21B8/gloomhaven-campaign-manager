Preparation = {}

function Preparation.start(callback)
  Preparation.verifyLoad()
  Preparation.fix()
  Preparation.revealLockedCharacters(callback)
  getObjectFromGUID(guids.GAMEBOX).takeObject({
    guid = guids.SCENARIO_BOOK,
    smooth = false,
    position = positions.SCENARIO_BOOK,
    rotation = Rotation.NORTH
  })
  getObjectFromGUID(guids.GAMEBOX).takeObject({
    guid = guids.RULE_BOOK,
    smooth = false,
    position = positions.RULE_BOOK,
    rotation = Rotation.NORTH
  })
end

-- Verifies that the script can actually run, by checking if needed objects exists.
function Preparation.verifyLoad()
  Preparation.verifyObject(guids.GAMEBOX, "Gamebox")
  Preparation.verifyContent(guids.GAMEBOX, guids.LOCKED_CLASSES, "Locked classes")
  Preparation.verifyContent(guids.GAMEBOX, guids.SCENARIO_BOOK, "Scenario book")
  Preparation.verifyContent(guids.GAMEBOX, guids.RULE_BOOK, "Rule book")
  Preparation.verifyContent(guids.GAMEBOX, guids.OPENING_CONDITIONS, "Opening Conditions")
  Preparation.verifyContent(guids.GAMEBOX, guids.RETIREMENT_SHEET, "Retirement Sheet")
  Preparation.verifyContent(guids.GAMEBOX, guids.TOWN_RECORDS, "Town Records")
  Preparation.verifyObject(guids.MAP, "Map")
  Preparation.verifyTable(guids.MAP, "tableML", "Scenario information")
  Preparation.verifyTable(guids.MAP, "Pros", "Prosperity information")
  Preparation.verifyObject(guids.ACHIEVEMENTS_BAG, "Achievements bag")
  Preparation.verifyObject(guids.DECK_MAT, "Deck Mat")
  Preparation.verifyObject(guids.PLAYER_MINUS_ONE_DECK, "-1 Deck")
  Preparation.verifyObject(guids.CITY_EVENTS_DECK_INITIAL, "City Events 1-30")
  Preparation.verifyObject(guids.CITY_EVENTS_DECK, "City Events 31+")
  Preparation.verifyObject(guids.ROAD_EVENTS_DECK_INITIAL, "Road Events 1-30")
  Preparation.verifyObject(guids.ROAD_EVENTS_DECK, "Road Events 31+")
  Preparation.verifyObject(guids.QUEST_DECK, "Quest Deck")
  Preparation.verifyObject(guids.CITY_MAT, "City Mat")
  Preparation.verifyObject(guids.EVENTS_MAT, "Events Mat")
  Preparation.verifyObject(guids.PARTY_SHEET, "Party Sheet")
  for i, zone in pairs(guids.ZONES) do
    Preparation.verifyObject(zone, "Player zone " .. i)
  end
  for i, zone in pairs(guids.ADD_PLAYERS) do
    Preparation.verifyObject(zone, "Add Player button " .. i)
  end
end

function Preparation.verifyObject(guid, name)
  assert(getObjectFromGUID(guid), name .. " is missing (" .. guid .. ")")
end

function Preparation.verifyContent(guid, content, name)
  assert(Utils.findObjectInfoInStack(getObjectFromGUID(guid), {guid=content}), name .. " is missing")
end

function Preparation.verifyTable(guid, table, name)
  assert(getObjectFromGUID(guid).getTable(table), name .. " is missing")
end

function Preparation.revealLockedCharacters(callback)
  getObjectFromGUID(guids.GAMEBOX).takeObject({
    guid = guids.LOCKED_CLASSES,
    smooth = false,
    callback_function = function(obj)
      Preparation.putDivinierIntoBox(obj)
      Preparation.revealOpeningConditions(callback) end
  })
end


function Preparation.putDivinierIntoBox(classes)
  getObjectFromGUID(guids.FORGOTTEN_CIRCLES_BOX).takeObject({
    guid = Game.CLASSES.Diviner.boxGuid,
    smooth = false,
    callback_function = function(obj) classes.putObject(obj) end
  })
end


function Preparation.revealOpeningConditions(callback)
  getObjectFromGUID(guids.GAMEBOX).takeObject({
    guid = guids.OPENING_CONDITIONS,
    smooth = false,
    position = positions.OPENING_CONDITIONS,
    rotation = Rotation.NORTH,
    callback_function = function() Preparation.revealRetirementSheet(callback) end
  })
end


function Preparation.revealRetirementSheet(callback)
  getObjectFromGUID(guids.GAMEBOX).takeObject({
    guid = guids.RETIREMENT_SHEET,
    smooth = false,
    position = positions.RETIREMENT_SHEET,
    rotation = Rotation.NORTH,
    callback_function = function() Preparation.finish(callback) end
  })
end


function Preparation.finish(callback)
    callback()
end


function Preparation.prepareSave()
  Preparation.fix()
  for _, zoneGuid in pairs(guids.ZONES) do
    local zone = getObjectFromGUID(zoneGuid)
    local zonePosition = zone.getPosition()
    zonePosition:setAt("y", 4.22)
    zone.setPosition(zonePosition)
  end
end


function Preparation.fix()
  Preparation.fixAbility("Brute", "Devasttating Hack", "Devastating Hack")
end

function Preparation.fixAbility(class, name, realName)
  Game.CLASSES[class].abilities[name] = Game.CLASSES[class].abilities[realName]
end

local Expansion = require("gloomhaven/Expansion")

Preparation = {}

function Preparation.start(callback)
  Preparation.verifyLoad()
  Preparation.revealLockedCharacters(callback)

  Preparation.takeFromGamebox(guids.SCENARIO_BOOK, positions.SCENARIO_BOOK)
  Preparation.takeFromGamebox(guids.RULE_BOOK, positions.RULE_BOOK)
end

function Preparation.takeFromGamebox(guid, position, callback)
  local object = getObjectFromGUID(guid)
  if object == nil then
    getObjectFromGUID(guids.GAMEBOX).takeObject({
      guid = guid,
      smooth = false,
      position = position,
      rotation = Rotation.NORTH,
      callback_function = callback
    })
  else
    callback(object)
  end
end

-- Verifies that the script can actually run, by checking if needed objects exists.
function Preparation.verifyLoad()
  Preparation.verifyObject(guids.GAMEBOX, "Gamebox")
  Preparation.verifyContent(guids.GAMEBOX, guids.LOCKED_CLASSES, "Locked classes")
  Preparation.verifyContent(guids.GAMEBOX, guids.SCENARIO_BOOK, "Scenario book")
  Preparation.verifyContent(guids.GAMEBOX, guids.RULE_BOOK, "Rule book")
  Preparation.verifyContent(guids.GAMEBOX, guids.OPENING_CONDITIONS, "Opening Conditions")
  Preparation.verifyContent(guids.GAMEBOX, guids.RETIREMENT_SHEET, "Retirement Sheet")
  Preparation.verifyContent(guids.GAMEBOX, guids.TOWN_RECORDS, "Town Records")
  Preparation.verifyObject(guids.MAP, "Map")
  Preparation.verifyTable(guids.MAP, "tableML", "Scenario information")
  Preparation.verifyTable(guids.MAP, "Pros", "Prosperity information")
  Preparation.verifyObject(guids.ACHIEVEMENTS_BAG, "Achievements bag")
  Preparation.verifyObject(guids.DECK_MAT, "Deck Mat")
  Preparation.verifyObject(guids.PLAYER_MINUS_ONE_DECK, "-1 Deck")
  Preparation.verifyObject(guids.CITY_MAT, "City Mat")
  Preparation.verifyObject(guids.EVENTS_MAT, "Events Mat")
  Preparation.verifyObject(guids.PARTY_SHEET, "Party Sheet")
  for i, zone in pairs(guids.ZONES) do
    Preparation.verifyObject(zone, "Player zone " .. i)
  end
  for i, zone in pairs(guids.ADD_PLAYERS) do
    Preparation.verifyObject(zone, "Add Player button " .. i)
  end
end

function Preparation.verifyObject(guid, name)
  assert(getObjectFromGUID(guid), name .. " is missing (" .. guid .. ")")
end

function Preparation.verifyContent(guid, content, name)
  assert(getObjectFromGUID(content)
         or Utils.findObjectIn(guid, {guid=content}),
         name .. " is missing")
end

function Preparation.verifyTable(guid, table, name)
  assert(getObjectFromGUID(guid).getTable(table), name .. " is missing")
end

function Preparation.revealLockedCharacters(callback)
  Preparation.takeFromGamebox(guids.LOCKED_CLASSES, positions.getSafe(),
                              function(obj)
                                Preparation.putDivinierIntoBox(obj)
                                Expansion.unpack(function()
                                  Preparation.finish(callback)
                                end)
                              end)
end


function Preparation.putDivinierIntoBox(classes)
  getObjectFromGUID(guids.FORGOTTEN_CIRCLES_BOX).takeObject({
    guid = Game.CLASSES.Diviner.boxGuid,
    smooth = false,
    callback_function = function(obj) classes.putObject(obj) end
  })
end

function Preparation.finish(callback)
    callback()
end

function Preparation.prepareSave()
  for _, zoneGuid in pairs(guids.ZONES) do
    local zone = getObjectFromGUID(zoneGuid)
    local zonePosition = zone.getPosition()
    zonePosition:setAt("y", 4.22)
    zone.setPosition(zonePosition)
  end
end

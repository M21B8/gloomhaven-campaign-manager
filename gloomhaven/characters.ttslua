characters = {}

function characters.read_all(content)
  print("Reading characters")

  for i, character in pairs(content) do
    characters.add_player(i, character)
  end
end


function characters.add_player(index, character)
  local player_zone = guids.ZONES[index]
  local add_player_button = guids.ADD_PLAYERS[index]
  getObjectFromGUID(add_player_button).call("addPlayer")

  Wait.condition(
    function() characters.read(player_zone, character) end,
    function() return characters.check_player_mat(player_zone) end
  )
end



function characters.read(player_zone, character)
  local player_mat = utils.find_object_in_zone(player_zone, "Player Mat")
  local character_box = getObjectFromGUID(info.CLASSES[character.class].box_guid)

  character_box.takeObject({
    position = player_mat.getPosition()
  })

  Wait.condition(
    function() characters.setup(player_zone, character) end,
    function() return characters.check_character_sheet(player_zone) end
  )
end


function characters.setup(player_zone, character)
  -- still need more waiting to init the UI of the sheet :-(
  Wait.time(function() characters.setup_character_sheet(player_zone, character) end, 1)
  characters.setup_abilities(player_zone, character)
  characters.setup_quest(player_zone, character)
end


function characters.setup_character_sheet(player_zone, character)
  local character_sheet = utils.find_object_in_zone(player_zone, "Character Sheet")

  if character.name then
    character_sheet.UI.setAttribute("Name", "text", character.name)
  end

  if character.gold then
    character_sheet.call('addEx', {name='gold', amount=character.gold})
  end

  if character.xp then
    character_sheet.call('addEx', {name='xp', amount=character.xp})
  end

  if character.checkmarks then
    for i=1, character.checkmarks do
      character_sheet.call('clickedToggle', "notes"..tostring(i))
    end
  end

  if character.perks then
    for _, perk in pairs(character.perks) do
      character_sheet.call('clickedToggle', "perk"..tostring(perk))
    end
  end

  if character.items then
    character_sheet.UI.setAttribute("Items", "text", table.concat(character.items, "\n"))
  end

  if character.notes then
    character_sheet.UI.setAttribute("NotesFront", "text", table.concat(character.notes, "\n"))
  end
end


function characters.setup_abilities(player_zone, character)
  if character.abilities then
    local ability_deck = utils.find_object_in_zone(player_zone, "Advanced Abilities")

    for _, ability in pairs(character.abilities) do
      local ability_card = utils.find_object_info_in_stack(ability_deck, ability)
      ability_deck.takeObject({
        position = characters.get_safe_position(),
        guid = ability_card.guid,
        callback_function = function(o) characters.move_to_hand(o, player_zone, 2) end
      })
    end
  end
end


function characters.setup_quest(player_zone, character)
  -- TODO ensure that the quests deck is full to make index access easier
  if character.quest then
    local quest_index = characters.get_quest_index(character.quest)
    local quest_deck = getObjectFromGUID(guids.QUESTS)
    quest_deck.takeObject({
      position = characters.get_safe_position(),
      index = quest_index - 1,
      callback_function = function(o) characters.move_to_hand(o, player_zone, 2) end
    })
  end
end

-- TODO this could be a generic function like wait_for_object
function characters.check_player_mat(zone_guid)
  return utils.find_object_in_zone(zone_guid, "Player Mat") ~= nil
end


function characters.check_character_sheet(zone_guid)
  return utils.find_object_in_zone(zone_guid, "Character Sheet") ~= nil
end

-- TODO this should be in a more generic module
function characters.move_to_hand(object, player_zone, hand)
  if not hand then hand = 1 end
  local player_name = info.PLAYERS[player_zone]
  object.deal(1, player_name, hand)
end


-- TODO this has to become better...
characters.positions = 0
function characters.get_safe_position()
  characters.positions = characters.positions + 1
  return vector(-43 + (characters.positions * 3), 2, -85)
end


function characters.get_quest_index(quest)
  local quest_by_name = info.QUESTS[quest]
  if quest_by_name then
    return quest_by_name.index
  end

  for _, g in pairs(info.QUESTS) do
    if g.number == quest then
      return g.index
    end
  end
end

characters = {}

function characters.read_all(content)
  print("Reading characters")

  for i, character in pairs(content) do
    if next(character) != nil then
        characters.add_player(i, character)
        characters.setPartySheetParty(i, character)
    end
  end
  characters.setPartySheetAverageLevel(content)
end


function characters.add_player(index, character)
  local player_zone = guids.ZONES[index]
  local add_player_button = guids.ADD_PLAYERS[index]
  getObjectFromGUID(add_player_button).call("addPlayer")

  Wait.condition(
    function() characters.read(player_zone, character) end,
    function() return characters.check_player_mat(player_zone) end
  )
end



function characters.read(player_zone, character)
  local player_mat = utils.find_object_in_zone(player_zone, {name = names.PLAYER_MAT})
  local character_box = getObjectFromGUID(info.CLASSES[character.class].box_guid)

  character_box.takeObject({
    position = player_mat.getPosition()
  })

  Wait.condition(
    function() characters.setup(player_zone, character) end,
    function() return characters.check_character_sheet(player_zone) end
  )
end


function characters.setup(player_zone, character)
  -- still need more waiting to init the UI of the sheet :-(
  Wait.time(function() characters.setup_character_sheet(player_zone, character) end, 1)
  Wait.time(function() characters.setup_character_maxHP(player_zone, character) end, 5)
  characters.setup_abilities(player_zone, character)
  characters.setup_quest(player_zone, character)
end


function characters.setup_character_maxHP(player_zone, character)
  local level = characters.getLevel(character.xp)
  local maxHealth = info.CLASSES[character.class].hp[level]
  local zone = getObjectFromGUID(player_zone)
  local figure
  local healthToken

  -- This should probably be added to utils.
  for _, object in pairs(zone.getObjects()) do
    if object.getName() == character.class and object.tag == "Figurine" then
      figure = object
    end
    if object.name == "Custom_Token" and string.find(object.getName(), "hp") then
      healthToken = object
    end
  end

  figure.getVar('health')["max"] = maxHealth
  figure.getVar('health')["value"] = maxHealth
  figure.call('setHealth')
  healthToken.setState(maxHealth)
end


function characters.setup_character_sheet(player_zone, character)
  local character_sheet = utils.find_object_in_zone(player_zone, {name = names.CHARACTER_SHEET})

  if character.name then
    character_sheet.UI.setAttribute("Name", "text", character.name)
  end

  if character.gold then
    character_sheet.call('addEx', {name='gold', amount=character.gold})
  end

  if character.xp then
    character_sheet.call('addEx', {name='xp', amount=character.xp})
  end

  if character.checkmarks then
    for i=1, character.checkmarks do
      character_sheet.call('clickedToggle', "notes"..tostring(i))
    end
  end

  if character.perks then
    characters.setup_perks(player_zone, character)
  end

  if character.items then
    characters.setup_items(player_zone, character)
  end

  if character.notes then
    character_sheet.UI.setAttribute("NotesFront", "text", table.concat(character.notes, "\n"))
  end

  if character.hidden_notes then
    character_sheet.UI.setAttribute("Notes", "text", table.concat(character.notes, "\n"))
  end
end


function characters.setup_abilities(player_zone, character)
  if character.abilities then
    local ability_deck = utils.find_object_in_zone(player_zone, {name = names.ABILITY_DECK})

    for _, ability in pairs(character.abilities) do
      local ability_card = utils.find_object_info_in_stack(ability_deck, {name=ability})
      ability_deck.takeObject({
        position = characters.get_safe_position(),
        guid = ability_card.guid,
        callback_function = function(o) characters.move_to_hand(o, player_zone, 2) end
      })
    end
  end
end


function characters.setup_quest(player_zone, character)
  -- TODO ensure that the quests deck is full to make index access easier
  if character.quest then
    local callback = function(obj) characters.move_to_position(obj, player_zone, positions.QUEST) end
    quests.take(character.quest, callback)
  end
end


function characters.setup_perks(player_zone, character)
  local perk_info = info.CLASSES[character.class].perks
  local character_sheet = utils.find_object_in_zone(player_zone, {name = names.CHARACTER_SHEET})
  local modifier_deck = utils.find_object_in_zone(player_zone, {name=names.MODIFIER_DECK, description="Player"})
  local other_deck = function(obj) return obj.getName():find(names.MODIFIER_DECK) and obj.getGUID() ~= modifier_deck.getGUID() end
  local additional_deck = utils.find_object_in_zone(player_zone, {func=other_deck})

  for _, perk in pairs(character.perks) do
    character_sheet.call('clickedToggle', "perk"..tostring(perk))
    characters.modify_deck(modifier_deck, additional_deck, perk_info[perk])
  end

  modifier_deck.shuffle()
end


function characters.setup_items(player_zone, character)
  local character_sheet = utils.find_object_in_zone(player_zone, {name = names.CHARACTER_SHEET})
  local player_mat = utils.find_object_in_zone(player_zone, {name = names.PLAYER_MAT})

  local items_text = ""
  for _, item in pairs(character.items) do
    local item_position
    if item.position then
      item_position = utils.getSnapPosition(player_mat, snaps[item.position])
    else
      item_position = positions.relative_to_zone(player_zone, positions.ITEM)
    end
    shop.get_item(item.name, item_position)
    items_text = items_text .. "\n" .. item.name
  end
  character_sheet.UI.setAttribute("Items", "text", items_text)
end


function characters.modify_deck(modifier_deck, additional_deck, info)
  if info.add then
    for _, card in pairs(info.add) do
      print("Adding: " .. card)
      local found_card = characters.find_modifier_card(additional_deck, card)
      additional_deck.takeObject({
        guid = found_card.guid,
        position = characters.get_safe_position(),
        smooth = false,
        callback_function = function(obj) obj.putObject(modifier_deck) end
      })
    end
  end

  if info.remove then
    for _, card in pairs(info.remove) do
      print("Removing: " .. card)
      local found_card = characters.find_modifier_card(modifier_deck, card)
      modifier_deck.takeObject({
        guid=found_card.guid,
        position=positions.REMOVED,
        smooth=false,
        callback_function = function(obj) obj.destruct() end})
    end
  end

  if info.ignore then
    print("Ignoring: " .. info.ignore)
  end
end


function characters.find_modifier_card(deck, name)
  local search_pattern = "^" .. names.ATTACK_MODIFIER .. " " .. utils.escape_pattern(name) .. "$"
  return utils.find_object_info_in_stack(deck, {name=search_pattern})
end


-- TODO this could be a generic function like wait_for_object
function characters.check_player_mat(zone_guid)
  return utils.find_object_in_zone(zone_guid, {name = names.PLAYER_MAT}) ~= nil
end


function characters.check_character_sheet(zone_guid)
  return utils.find_object_in_zone(zone_guid, {name = names.CHARACTER_SHEET}) ~= nil
end

function characters.move_to_position(object, player_zone, position)
  object.setPosition(positions.relative_to_zone(player_zone, position))
end

-- TODO this should be in a more generic module
function characters.move_to_hand(object, player_zone, hand)
  if not hand then hand = 1 end
  local player_name = info.PLAYERS[player_zone]
  object.deal(1, player_name, hand)
end


-- TODO this has to become better...
characters.positions = 0
function characters.get_safe_position()
  characters.positions = characters.positions + 1
  return vector(-43 + (characters.positions * 3), 2, -85)
end


function characters.getLevel(curXP)
  for i, xp in pairs(info.XPLevel) do
    if curXP < xp then
      return i-1
    end
  end
  return 9
end


function characters.setPartySheetParty(position, character)
  local partySheetAttributeName = {"playerone", "playertwo", "playerthree", "playerfour"}
  local party_sheet = getObjectFromGUID(guids.PARTY_SHEET)
  local attributeName = partySheetAttributeName[position]
  local attributeLvlName = attributeName..'lvl'
  local level = characters.getLevel(character.xp)

  party_sheet.UI.setAttribute(attributeName, "text", character.name)
  party_sheet.UI.setAttribute(attributeLvlName, "text", level)
end

-- TODO It should be easier than this. :()
function characters.setPartySheetAverageLevel(content)
  local party_sheet = getObjectFromGUID(guids.PARTY_SHEET)
  local sum = 0
  local numPlayers = 0
  for i, character in pairs(content) do
    if next(character) != nil then
        sum = sum + characters.getLevel(character.xp)
        numPlayers = numPlayers + 1
    end
  end
  local average = sum / numPlayers
  local scenarioLevel = math.ceil(average / 2)
  party_sheet.UI.setAttribute("averageLevel", "text", tonumber(string.format("%.2f", average)))
  party_sheet.UI.setAttribute("scenarioLevel", "text", tonumber(string.format("%d", scenarioLevel)))
end

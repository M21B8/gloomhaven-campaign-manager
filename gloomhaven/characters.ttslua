Character = {}

function Character.read_all(content)
  print("Reading characters")

  for i, character in pairs(content) do
    if next(character) != nil then
        Character.add_player(i, character)
        Character.setPartySheetParty(i, character)
    end
  end
  Character.setPartySheetAverageLevel(content)
end


function Character.save()
  characterList = {}

  for _, zoneGuid in pairs(guids.ZONES) do
    table.insert(characterList, Character.saveCharacter(zoneGuid))
  end

  return characterList
end


function Character.add_player(index, character)
  local player_zone = guids.ZONES[index]
  local add_player_button = guids.ADD_PLAYERS[index]
  getObjectFromGUID(add_player_button).call("addPlayer")

  Wait.condition(
    function() Character.read(player_zone, character) end,
    function() return Character.check_player_mat(player_zone) end
  )
end



function Character.read(player_zone, character)
  local player_mat = utils.find_object_in_zone(player_zone, {name = names.PLAYER_MAT})
  local character_box = getObjectFromGUID(info.CLASSES[character.class].box_guid)

  character_box.takeObject({
    position = player_mat.getPosition()
  })

  Wait.condition(
    function() Character.setup(player_zone, character) end,
    function() return Character.check_character_sheet(player_zone) end
  )
end


function Character.setup(player_zone, character)
  -- still need more waiting to init the UI of the sheet :-(
  Wait.time(function() Character.setup_character_sheet(player_zone, character) end, 1)
  Wait.time(function() Character.setup_character_maxHP(player_zone, character) end, 5)
  Character.setup_abilities(player_zone, character)
  Character.setup_quest(player_zone, character)
end


function Character.setup_character_maxHP(player_zone, character)
  local characterInfo = info.CLASSES[character.class]
  local level = Character.getLevel(character.xp)
  local maxHealth = characterInfo.hp[level]

  Character.setupFigureHealth(player_zone, character.class, maxHealth)
  local tokenName = characterInfo.hp[1] .. " hp"
  local healthToken = utils.find_object_in_zone(player_zone, {name=tokenName})
  healthToken.setState(maxHealth)

  if characterInfo.extra_figure then
    maxHealth = characterInfo.extra_figure.hp[level]
    Character.setupFigureHealth(player_zone, characterInfo.extra_figure.name, maxHealth)
  end
end

function Character.setupFigureHealth(playerZone, name, health)
  local figure = utils.find_object_in_zone(playerZone, {name=name, tag="Figurine"})

  figure.getVar('health')["max"] = health
  figure.getVar('health')["value"] = health
  figure.call('setHealth')
end


function Character.setup_character_sheet(player_zone, character)
  local character_sheet = utils.find_object_in_zone(player_zone, {name = names.CHARACTER_SHEET})

  if character.name then
    character_sheet.UI.setAttribute("Name", "text", character.name)
  end

  if character.gold then
    character_sheet.call('addEx', {name='gold', amount=character.gold})
  end

  if character.xp then
    character_sheet.call('addEx', {name='xp', amount=character.xp})
  end

  if character.checkmarks then
    for i=1, character.checkmarks do
      character_sheet.call('clickedToggle', "notes"..tostring(i))
    end
  end

  if character.perks then
    Character.setup_perks(player_zone, character)
  end

  if character.items then
    Character.setup_items(player_zone, character)
  end

  if character.notes then
    character_sheet.UI.setAttribute("NotesFront", "text", table.concat(character.notes, "\n"))
  end

  if character.hidden_notes then
    character_sheet.UI.setAttribute("Notes", "text", table.concat(character.notes, "\n"))
  end
end


function Character.setup_abilities(player_zone, character)
  if character.abilities then
    local ability_deck = utils.find_object_in_zone(player_zone, {name = names.ABILITY_DECK})

    for _, ability in pairs(character.abilities) do
      local ability_card = utils.find_object_info_in_stack(ability_deck, {name=ability})
      ability_deck.takeObject({
        position = Character.get_safe_position(),
        guid = ability_card.guid,
        callback_function = function(o) Character.move_to_hand(o, player_zone, 2) end
      })
    end
  end
end


function Character.setup_quest(player_zone, character)
  -- TODO ensure that the quests deck is full to make index access easier
  if character.quest then
    local callback = function(obj) Character.move_to_position(obj, player_zone, positions.QUEST) end
    quests.take(character.quest, callback)
  end
end


function Character.setup_perks(player_zone, character)
  local perk_info = info.CLASSES[character.class].perks
  local character_sheet = utils.find_object_in_zone(player_zone, {name = names.CHARACTER_SHEET})
  local modifier_deck = utils.find_object_in_zone(player_zone, {name=names.MODIFIER_DECK, description="Player"})
  local other_deck = function(obj) return obj.getName():find(names.MODIFIER_DECK) and obj.getGUID() ~= modifier_deck.getGUID() end
  local additional_deck = utils.find_object_in_zone(player_zone, {func=other_deck})

  for _, perk in pairs(character.perks) do
    character_sheet.call('clickedToggle', "perk"..tostring(perk))
    Character.modify_deck(modifier_deck, additional_deck, perk_info[perk])
    if additional_deck.remainder then
      -- Remainder may only live for a single frame after last card is taken
      -- May need to move this into the modify_deck routine itself to reduce
      -- any delay.
      additional_deck = additional_deck.remainder
    end
  end

  modifier_deck.shuffle()
end


function Character.setup_items(player_zone, character)
  local character_sheet = utils.find_object_in_zone(player_zone, {name = names.CHARACTER_SHEET})
  local player_mat = utils.find_object_in_zone(player_zone, {name = names.PLAYER_MAT})

  local items_text = ""
  for _, item in pairs(character.items) do
    local item_position
    if item.position then
      item_position = utils.getSnapPosition(player_mat, snaps[item.position])
    else
      item_position = positions.relative_to_zone(player_zone, positions.ITEM)
    end
    shop.getItem(item.name, item_position)
    items_text = items_text .. "\n" .. item.name
  end
  character_sheet.UI.setAttribute("Items", "text", items_text)
end


function Character.modify_deck(modifier_deck, additional_deck, info)
  if info.add then
    for _, card in pairs(info.add) do
      print("Adding: " .. card)
      if additional_deck.name == "Card" then
        additional_deck.putObject(modifier_deck)
        return
      end
      local found_card = Character.find_modifier_card(additional_deck, card)
      additional_deck.takeObject({
        guid = found_card.guid,
        position = Character.get_safe_position(),
        smooth = false,
        callback_function = function(obj) obj.putObject(modifier_deck) end
      })
    end
  end

  if info.remove then
    for _, card in pairs(info.remove) do
      print("Removing: " .. card)
      local found_card = Character.find_modifier_card(modifier_deck, card)
      modifier_deck.takeObject({
        guid=found_card.guid,
        position=positions.REMOVED,
        smooth=false,
        callback_function = function(obj) obj.destruct() end})
    end
  end

  if info.ignore then
    print("Ignoring: " .. info.ignore)
  end
end


function Character.find_modifier_card(deck, name)
  local search_pattern = "^" .. names.ATTACK_MODIFIER .. " " .. utils.escape_pattern(name) .. "$"
  return utils.find_object_info_in_stack(deck, {name=search_pattern})
end


-- TODO this could be a generic function like wait_for_object
function Character.check_player_mat(zone_guid)
  return utils.find_object_in_zone(zone_guid, {name = names.PLAYER_MAT}) ~= nil
end


function Character.check_character_sheet(zone_guid)
  return utils.find_object_in_zone(zone_guid, {name = names.CHARACTER_SHEET}) ~= nil
end

function Character.move_to_position(object, player_zone, position)
  object.setPosition(positions.relative_to_zone(player_zone, position))
end

-- TODO this should be in a more generic module
function Character.move_to_hand(object, player_zone, hand)
  if not hand then hand = 1 end
  local player_name = info.PLAYERS[player_zone]
  object.deal(1, player_name, hand)
end


-- TODO this has to become better...
Character.positions = 0
function Character.get_safe_position()
  Character.positions = Character.positions + 1
  return vector(-43 + (Character.positions * 3), 2, -85)
end


function Character.getLevel(curXP)
  for i, xp in pairs(info.XPLevel) do
    if curXP < xp then
      return i-1
    end
  end
  return 9
end


function Character.setPartySheetParty(position, character)
  local partySheetAttributeName = {"playerone", "playertwo", "playerthree", "playerfour"}
  local party_sheet = getObjectFromGUID(guids.PARTY_SHEET)
  local attributeName = partySheetAttributeName[position]
  local attributeLvlName = attributeName..'lvl'
  local level = Character.getLevel(character.xp)

  party_sheet.UI.setAttribute(attributeName, "text", character.name)
  party_sheet.UI.setAttribute(attributeLvlName, "text", level)
end

-- TODO It should be easier than this. :()
function Character.setPartySheetAverageLevel(content)
  local party_sheet = getObjectFromGUID(guids.PARTY_SHEET)
  local sum = 0
  local numPlayers = 0
  for i, character in pairs(content) do
    if next(character) != nil then
        sum = sum + Character.getLevel(character.xp)
        numPlayers = numPlayers + 1
    end
  end
  local average = sum / numPlayers
  local scenarioLevel = math.ceil(average / 2)
  party_sheet.UI.setAttribute("averageLevel", "text", tonumber(string.format("%.2f", average)))
  party_sheet.UI.setAttribute("scenarioLevel", "text", tonumber(string.format("%d", scenarioLevel)))
end


function Character.saveCharacter(playerZone)
  local characterMat = utils.find_object_in_zone(playerZone, {name=names.CHARACTER_MAT})
  if not characterMat then
    return {}
  end

  local playerMat = utils.find_object_in_zone(playerZone, {name=names.PLAYER_MAT})
  local characterSheet = utils.find_object_in_zone(playerZone, {name=names.CHARACTER_SHEET})
  local characterSheetButtons = characterSheet.getTable("buttons")

  character = {}
  character.class = characterMat.getDescription()
  character.name = characterSheet.UI.getAttribute("Name", "text")
  character.xp = characterSheet.UI.getAttribute("xp", "text")
  character.gold = characterSheet.UI.getAttribute("gold", "text")
  character.notes = characterSheet.UI.getAttribute("NotesFront", "text")
  character.hidden_notes = characterSheet.UI.getAttribute("Notes", "text")

  local totalCheckmarks = 0
  for i=1, 18 do
    if characterSheetButtons["notes"..i].label ~= "" then
      totalCheckmarks = totalCheckmarks + 1
    end
  end
  character.checkmarks = totalCheckmarks

  character.perks = {}
  for i=1, 15 do
    if characterSheetButtons["perk"..i].label ~= "" then
      table.insert(character.perks, i)
    end
  end

  character.items = Character.saveItems(playerZone)

  -- TODO this is not what I call clean code :-(
  character.abilities = {}
  for _, object in pairs(getObjectFromGUID(playerZone).getObjects()) do
    if object.tag == "Card" and object.getDescription():find(character.class) then
      local name = object.getName():gsub("%s?%(%d+%)", "")
      local allAbilites = info.CLASSES[character.class].abilities
      if allAbilites and
         (allAbilites[name] and allAbilites[name].level ~= 1 and allAbilites[name].level ~= "X"
          or not allAbilites[name]) then
        table.insert(character.abilities, name)
      end
    end
  end


  -- TODO this is WAAAY to ugly...
  for _, object in pairs(getObjectFromGUID(playerZone).getObjects()) do
    if object.tag == "Card" and object.getData().CustomDeck then
      for key, _ in pairs(object.getData().CustomDeck) do
        if key == 1997 then
          local cardId = object.getData().CardID
          local cardIndex = tonumber(tostring(cardId):sub(-2, -1))
          for name, info in pairs(info.QUESTS) do
            if info.index == cardIndex then
              character.quest = name
              break
            end
          end
        end
      end
    end
  end

  return character
end


function Character.saveItems(playerZone)
  local playerMat = utils.find_object_in_zone(playerZone, {name=names.PLAYER_MAT})
  local items = {}
  for _, object in pairs(getObjectFromGUID(playerZone).getObjects()) do
    if shop.isItem(object) then
      local item = {name=object.getName(), position=Character.getItemPosition(playerMat, object)}
      table.insert(items, item)
    elseif object.tag == "Deck" then
      for _, card in pairs(object.getObjects()) do
        if shop.isItemInfo(card) then
          local item = {name=card.name, position=Character.getItemPosition(playerMat, object)}
          table.insert(items, item)
        end
      end
    end
  end

  return items
end


function Character.getItemPosition(playerMat, object)
  -- TODO The snap module is used for all snap points not only player mat snaps. So this currently
  -- only works, because the player mat snaps are defined first. This should be changed, so that it
  -- works regardless of definition order
  for name, snap in pairs(snaps) do
    if utils.getSnapPosition(playerMat, snap) == object.getPosition() then
      return name
    end
  end

  return "Unequipped"
end

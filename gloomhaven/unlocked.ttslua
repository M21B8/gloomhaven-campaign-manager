Unlocked = {}

function Unlocked.loadAll(unlocked)
  if unlocked.classes then
    Utils.waitForObject(guids.LOCKED_CLASSES, function() Unlocked.loadClasses(unlocked.classes) end)
  end

  if unlocked.items then
    Unlocked.loadItems(unlocked.items)
  end

  if unlocked.special_conditions then
    Utils.waitForObject(guids.OPENING_CONDITIONS, function() Unlocked.loadOpeningConditions(unlocked.special_conditions) end)
  end
end


function Unlocked.loadClasses(classes)
  print("Loading unlocked classes")
  for i, class in pairs(classes) do
    Unlocked.loadClass(i, class)
  end
end


function Unlocked.loadClass(number, class)
  local characterBoxes = getObjectFromGUID(guids.LOCKED_CLASSES)
  local lastBox = getObjectFromGUID(guids.LAST_BOX)
  local beforeLastBox = getObjectFromGUID(guids.BEFORE_LAST_BOX)
  local delta = (lastBox.getPosition() - beforeLastBox.getPosition()) * number

  characterBoxes.takeObject({
    position = lastBox.getPosition() + delta,
    rotation = lastBox.getRotation(),
    smooth = false,
    guid = Game.CLASSES[class].box_guid,
    callback_function = function(obj) obj.setLock(true) end
  })
end


function Unlocked.loadItems(items)
  local cityMat = getObjectFromGUID(guids.CITY_MAT)
  local shopPosition = Utils.getSnapPosition(cityMat, snaps.SHOP)

  for _, item in pairs(items) do
    Shop.getRewardItem(item, shopPosition)
  end
end


function Unlocked.loadOpeningConditions(openingConditions)
  Unlocked.setOpeningCondition(openingConditions.ancient_technology, "Ancient")
  Unlocked.setOpeningCondition(openingConditions.drake_aided, "Drake")
  Unlocked.setOpeningCondition(openingConditions.low_reputation, "RepN10")
  Unlocked.setOpeningCondition(openingConditions.lowest_reputation, "RepN20")
  Unlocked.setOpeningCondition(openingConditions.high_reputation, "Rep10")
  Unlocked.setOpeningCondition(openingConditions.highest_reputation, "Rep20")

  if openingConditions.retired then
    getObjectFromGUID(guids.OPENING_CONDITIONS).call("clickedToggle", "Retire")
    getObjectFromGUID(guids.GAMEBOX).takeObject({
      guid = guids.TOWN_RECORDS,
      position = positions.TOWN_RECORDS,
      rotation = Rotation.NORTH,
      smooth = false
    })
  end

  if openingConditions.donations then
    for i=1, openingConditions.donations do
      Unlocked.setOpeningCondition(true, "Donation"..i)
    end
    if openingConditions.donations >= 10 then
      Unlocked.setOpeningCondition(true, "DonationFull")
    end
  end
end

function Unlocked.setOpeningCondition(condition, name)
  if condition then
    getObjectFromGUID(guids.OPENING_CONDITIONS).call("clickedToggle", name)
  end
end


function Unlocked.saveAll()
  return {
    classes = Unlocked.saveClasses(),
    items = Shop.save(),
    special_conditions = Unlocked.saveOpeningConditions()
  }
end

function Unlocked.saveClasses()
  local classes = {}
  for class, info in pairs(Game.CLASSES) do
    local box = getObjectFromGUID(info.box_guid)
    if box and not info.isStartingClass then
      table.insert(classes, class)
    end
  end

  return classes
end



function Unlocked.saveOpeningConditions()
  local openingConditionsSheet = getObjectFromGUID(guids.OPENING_CONDITIONS)
  if not openingConditionsSheet then
    return {}
  end

  local openingConditions = {}
  local buttons = openingConditionsSheet.getTable("buttons")
  openingConditions.ancient_technology = buttons["Ancient"].label ~= ""
  openingConditions.drake_aided = buttons["Drake"].label ~= ""
  openingConditions.low_reputation = buttons["RepN10"].label ~= ""
  openingConditions.lowest_reputation = buttons["RepN20"].label ~= ""
  openingConditions.high_reputation = buttons["Rep10"].label ~= ""
  openingConditions.highest_reputation = buttons["Rep20"].label ~= ""
  openingConditions.retired = buttons["Retire"].label ~= ""
  local donations = 0
  for i=1, 10 do
    if buttons["Donation"..i].label ~= "" then
      donations = donations + 1
    end
  end
  openingConditions.donations = donations

  return openingConditions
end

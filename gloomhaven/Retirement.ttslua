local Character = require("gloomhaven/Character")
local Component = require("gloomhaven/Component")
local Error = require("common/Error")
local Game = require("gloomhaven/Game")
local Preparation = require("gloomhaven/Preparation")
local Quest = require("gloomhaven/Quest")
local TableUtil = require("common/TableUtil")
local Task = require("gloomhaven/Task")
local Utils = require("common/Utils")

local Retirement = {}

Retirement.COLUMNS = 5

function Retirement.load(retired)
  Task.load("Retirements", retired, Retirement.validate, Retirement.doLoad)
end

function Retirement.validate(retired)
  for i, retire in pairs(retired) do
    if retire.quest and not Game.QUESTS[retire.quest] then
      Error.add("A quest named '%s' does not exist. Can't exclude it from the deck.", retire.quest)
    end
  end
  return true, Error.pop()
end

function Retirement.doLoad(retired)
  Preparation.takeFromGamebox(Component.guids.RETIREMENT_SHEET, Component.positions.RETIREMENT_SHEET)
  Utils.waitForObject(Component.guids.RETIREMENT_SHEET, function() Retirement.startLoading(retired) end)
end

function Retirement.startLoading(retired)
  local retirementSheet = getObjectFromGUID(Component.guids.RETIREMENT_SHEET)

  for i, retirement in ipairs(retired) do
    local row = i - 1
    local offset = row * Retirement.COLUMNS

    retirementSheet.editInput({index=offset + 0, value=retirement.player})
    retirementSheet.editInput({index=offset + 1, value=retirement.character})
    retirementSheet.editInput({index=offset + 2, value=retirement.class})
    retirementSheet.editInput({index=offset + 3, value=retirement.level})
    retirementSheet.editInput({index=offset + 4, value=retirement.perks})

    if retirement.quest then
      Quest.take(retirement.quest, function(card) card.destruct() end)
    end
  end

  retirementSheet.call("forceSave", {})
end


function Retirement.save()
  local retired = {}

  Retirement.saveRetirementSheet(retired)
  Retirement.saveCompletedQuests(retired)

  return TableUtil.emptyToNil(retired)
end

function Retirement.saveRetirementSheet(retired)
  local retirementSheet = getObjectFromGUID(Component.guids.RETIREMENT_SHEET)
  if not retirementSheet then
    return
  end

  local retiredCharacter = {}
  for i, input in pairs(retirementSheet.getInputs()) do
    local column = (i - 1) % Retirement.COLUMNS
    if column == 0 then
      if TableUtil.isNotEmpty(retiredCharacter) then
        table.insert(retired, retiredCharacter)
      end
      retiredCharacter = {}
    end

    if input.value ~= "" then
      if column == 0 then
        retiredCharacter.player = input.value
      elseif column == 1 then
        retiredCharacter.character = input.value
      elseif column == 2 then
        retiredCharacter.class = input.value
      elseif column == 3 then
        retiredCharacter.level = tonumber(input.value)
      elseif column == 4 then
        retiredCharacter.perks = tonumber(input.value)
      end
    end
  end
  if TableUtil.isNotEmpty(retiredCharacter) then
    table.insert(retired, retiredCharacter)
  end
end


function Retirement.saveCompletedQuests(retired)
  local completedQuests = {}
  for name, _ in pairs(Game.QUESTS) do
    completedQuests[name] = 1
  end

  local questDeck = Component.fromDeckMat(Component.snaps.QUESTS)
  for _, quest in pairs(Utils.getContainedObjects(questDeck)) do
    local questName = Component.getQuestInfo(quest)
    completedQuests[questName] = nil
  end

  for _, playerZone in pairs(Component.guids.ZONES) do
    local playerQuest = Character.findQuest(playerZone)
    if playerQuest then
      completedQuests[playerQuest] = nil
    end
  end

  local i = 1
  for completed, _ in pairs(completedQuests) do
    if not retired[i] then
      retired[i] = {}
    end
    retired[i].quest = completed
    i = i + 1
  end
end

return Retirement

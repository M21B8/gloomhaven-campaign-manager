Utils = {}

--- Reads the body of the notebook with the given name.
function Utils.readNotebook(name)
  for _, notebook in pairs(Notes.getNotebookTabs()) do
    if notebook.title == name then
      return notebook.body
    end
  end
  return nil
end


function Utils.waitForObject(guid, callback, timeout, timeout_callback)
  local waiter = function() return getObjectFromGUID(guid) ~= nil end
  Wait.condition(callback, waiter, timeout, timeout_callback)
end


function Utils.waitForObjectInZone(zone, search, callback, timeout, timeout_callback)
  local waiter = function() return Utils.findObjectInZone(zone, search) ~= nil end
  Wait.condition(callback, waiter, timeout, timeout_callback)
end


-- TODO this looks quite ugly now...
function Utils.findObjectInZone(zone_guid, search)
  local zone = getObjectFromGUID(zone_guid)
  local plain = search.plain
  if not plain then plain = false end

  local tester
  if search.func then
    tester = search.func
  else
    tester = function(object)
               return Utils.findNonEmpty(object.getGUID(), search.guid, plain)
                      and Utils.findNonEmpty(object.getName(), search.name, plain)
                      and Utils.findNonEmpty(object.getDescription(), search.description, plain)
                      and Utils.findNonEmpty(object.tag, search.tag, plain)
               end
  end

  for _, object in pairs(zone.getObjects()) do
    if tester(object) then
      return object
    end
  end
  return nil
end


function Utils.findObjectInfoInStack(stack, search)
  local plain = search.plain
  if not plain then plain = false end

  for _, objectInfo in pairs(stack.getObjects()) do
    if Utils.findNonEmpty(objectInfo.guid, search.guid, plain)
       and Utils.findNonEmpty(objectInfo.name, search.name, plain)
       and Utils.findNonEmpty(objectInfo.description, search.description, plain)
    then
      return objectInfo
    end
  end
  return nil
end


function Utils.findNonEmpty(value, pattern, plain)
  return pattern == nil or value:find(pattern, nil, plain)
end


function Utils.getSnapPosition(object, snapPoint)
  return object.positionToWorld(object.getSnapPoints()[snapPoint].position)
end


function Utils.adjustIndex(index, removed)
  if not index then
    return nil
  end
  local adjustedIndex = index
  for _, removedIndex in pairs(removed) do
    if removedIndex < index then
      adjustedIndex = adjustedIndex - 1
    end
  end
  return adjustedIndex
end

function Utils.nvl(value, default)
  if value ~= nil then
    return value
  end
  return default
end

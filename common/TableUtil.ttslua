local TableUtil = {}

--- Variant of pairs that also works for nil values.
function TableUtil.pairs(table)
  if table then
    return pairs(table)
  end
  return pairs({})
end

function TableUtil.keys(tab)
  local keys = {}
  for key, _ in TableUtil.pairs(tab) do
    table.insert(keys, key)
  end
  return keys
end

--- Checks whether a given value is part of the given table.
function TableUtil.contains(table, value)
  for _, v in pairs(table) do
    if v == value then
      return true
    end
  end
  return false
end

--- Shuffles the given table.
function TableUtil.shuffle(table)
  for i = #table, 2, -1 do
    local j = math.random(i)
    table[i], table[j] = table[j], table[i]
  end
end

--- Appends t2 to t1 and returns a new table.
-- Only appends the values, not the keys.
function TableUtil.append(t1, t2)
  local t3 = {}
  for k,v in pairs(t1) do
    table.insert(t3, v)
  end
  for k,v in pairs(t2) do
    table.insert(t3, v)
  end
  return t3
end

--- Checks whether a table is empty.
--- A nil value is also considered an empty table.
function TableUtil.isEmpty(table)
  return not table or not next(table)
end

--- Checks whether a table is not empty.
--- Also works for nil values, for which this is always false.
function TableUtil.isNotEmpty(table)
  return not TableUtil.isEmpty(table)
end

function TableUtil.emptyToNil(table)
  if TableUtil.isEmpty(table) then
    return nil
  end
  return table
end

function TableUtil.sortByAttribute(tableToSort, attributeName)
  return table.sort(tableToSort, function(l, r) return l[attributeName] < r[attributeName] end)
end

--- Converts a table given as a set into a list.
function TableUtil.setToList(set)
  list = {}
  for entry, value in pairs(set) do
    if value then
      table.insert(list, entry)
    end
  end

  return list
end

return TableUtil
